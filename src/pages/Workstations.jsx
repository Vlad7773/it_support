import React, { useState, useEffect } from 'react';

const Workstations = () => {
  const [workstations, setWorkstations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [selectedWorkstation, setSelectedWorkstation] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterGrif, setFilterGrif] = useState('all');
  const [filterDepartment, setFilterDepartment] = useState('all');
  const [modalView, setModalView] = useState('main');

  const [formData, setFormData] = useState({
    inventory_number: '',
    ip_address: '',
    mac_address: '',
    grif: '–î–°–ö',
    department: '',
    responsible: '',
    contacts: '',
    notes: '',
    processor: '',
    ram: '',
    storage: '',
    os: '',
    monitor: '',
    network: ''
  });

  useEffect(() => {
    setLoading(true);
    // try {
    //   const mockWorkstations = generateMockWorkstations();
    //   setTimeout(() => {
    //     setWorkstations(mockWorkstations);
    //     setLoading(false);
    //   }, 500);
    // } catch (err) {
    //   setError(err.message);
    //   setLoading(false);
    // }

    // Fetch data from the backend
    fetch('/api/workstations')
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        setWorkstations(data);
        setLoading(false);
      })
      .catch(error => {
        setError(error.message);
        setLoading(false);
      });

  }, []);

  const handleAdd = (e) => {
    e.preventDefault();
    if (!formData.inventory_number || !formData.ip_address || !formData.mac_address) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è');
      return;
    }
    const newWorkstation = {
      id: workstations.length + 1,
      ...formData,
      registration_date: new Date().toISOString().split('T')[0]
    };
    setWorkstations([...workstations, newWorkstation]);
    setShowAddModal(false);
    setModalView('main');
    setFormData({
      inventory_number: '',
      ip_address: '',
      mac_address: '',
      grif: '–î–°–ö',
      department: '',
      responsible: '',
      contacts: '',
      notes: '',
      processor: '',
      ram: '',
      storage: '',
      os: '',
      monitor: '',
      network: ''
    });
  };

  const handleEdit = (e) => {
    e.preventDefault();
    if (!formData.inventory_number || !formData.ip_address || !formData.mac_address) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è');
      return;
    }
    const updatedWorkstations = workstations.map(ws =>
      ws.id === selectedWorkstation.id ? { ...ws, ...formData } : ws
    );
    setWorkstations(updatedWorkstations);
    setShowEditModal(false);
    setModalView('main');
    setSelectedWorkstation(null);
    setFormData({
      inventory_number: '',
      ip_address: '',
      mac_address: '',
      grif: '–î–°–ö',
      department: '',
      responsible: '',
      contacts: '',
      notes: '',
      processor: '',
      ram: '',
      storage: '',
      os: '',
      monitor: '',
      network: ''
    });
  };

  const handleDelete = () => {
    const updatedWorkstations = workstations.filter(ws => ws.id !== selectedWorkstation.id);
    setWorkstations(updatedWorkstations);
    setShowDeleteModal(false);
    setSelectedWorkstation(null);
  };

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleFilterGrif = (e) => {
    setFilterGrif(e.target.value);
  };

  const handleFilterDepartment = (e) => {
    setFilterDepartment(e.target.value);
  };

  const filteredWorkstations = workstations.filter(ws => {
    const searchLower = searchTerm.toLowerCase();
    const matchesSearch =
      ws.inventory_number.toLowerCase().includes(searchLower) ||
      ws.ip_address.toLowerCase().includes(searchLower) ||
      ws.mac_address.toLowerCase().includes(searchLower) ||
      (ws.department?.toLowerCase().includes(searchLower) ?? false) ||
      (ws.responsible?.toLowerCase().includes(searchLower) ?? false);

    const matchesGrif = filterGrif === 'all' || ws.grif === filterGrif;
    const matchesDepartment = filterDepartment === 'all' || (ws.department ? ws.department === filterDepartment : true);

    return matchesSearch && matchesGrif && matchesDepartment;
  });

  if (loading) {
    return <div className="p-6 text-white">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
  }

  if (error) {
    return <div className="p-6 text-red-500">–ü–æ–º–∏–ª–∫–∞: {error}</div>;
  }

  return (
    <div className="p-6 flex flex-col h-full">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-white">–†–æ–±–æ—á—ñ —Å—Ç–∞–Ω—Ü—ñ—ó</h1>
        <button
          onClick={() => setShowAddModal(true)}
          className="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg transition-colors"
        >
          –î–æ–¥–∞—Ç–∏ –ê–†–ú
        </button>
      </div>

      <div className="bg-dark-card rounded-lg shadow-card flex flex-col flex-1 overflow-hidden">
        <div className="p-4 border-b border-dark-border flex-shrink-0">
          <div className="flex flex-wrap items-center gap-4">
            <div className="w-64">
              <div className="relative">
                <input
                  type="text"
                  placeholder="–ü–æ—à—É–∫..."
                  className="w-full bg-dark-bg border border-dark-border rounded-lg pl-10 pr-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-primary-500"
                  value={searchTerm}
                  onChange={handleSearch}
                />
                <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-dark-textSecondary">
                  üîç
                </div>
              </div>
            </div>
            <select
              className="bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-primary-500"
              value={filterGrif}
              onChange={handleFilterGrif}
            >
              <option value="all">–í—Å—ñ –≥—Ä–∏—Ñ–∏</option>
              <option value="–î–°–ö">–î–°–ö</option>
              <option value="–û—Å–æ–±–ª–∏–≤–æ—ó –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ">–û—Å–æ–±–ª–∏–≤–æ—ó –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ</option>
              <option value="–¶—ñ–ª–∫–æ–º —Ç–∞—î–º–Ω–æ">–¶—ñ–ª–∫–æ–º —Ç–∞—î–º–Ω–æ</option>
              <option value="–¢–∞—î–º–Ω–æ">–¢–∞—î–º–Ω–æ</option>
            </select>
            <select
              className="bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-primary-500"
              value={filterDepartment}
              onChange={handleFilterDepartment}
            >
              <option value="all">–í—Å—ñ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏</option>
              <option value="IT –≤—ñ–¥–¥—ñ–ª">IT –≤—ñ–¥–¥—ñ–ª</option>
              <option value="–ë–µ–∑–ø–µ–∫–∞">–ë–µ–∑–ø–µ–∫–∞</option>
              <option value="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è">–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è</option>
            </select>
          </div>
        </div>

        <div className="relative overflow-y-auto flex-1">
          <div className="table-container overflow-y-auto w-full" style={{ maxHeight: 'calc(100vh - 250px)' }}>
            <table className="table-auto w-full">
              <thead className="sticky top-0 bg-dark-card z-10">
                <tr className="border-b border-dark-border">
                  <th className="px-4 py-2 text-left" style={{ width: '5%' }}>ID</th>
                  <th className="px-4 py-2 text-left" style={{ width: '15%' }}>–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä</th>
                  <th className="px-4 py-2 text-left" style={{ width: '10%' }}>IP –∞–¥—Ä–µ—Å–∞</th>
                  <th className="px-4 py-2 text-left" style={{ width: '15%' }}>MAC –∞–¥—Ä–µ—Å–∞</th>
                  <th className="px-4 py-2 text-left" style={{ width: '15%' }}>–ì—Ä–∏—Ñ</th>
                  <th className="px-4 py-2 text-left" style={{ width: '15%' }}>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª</th>
                  <th className="px-4 py-2 text-left" style={{ width: '15%' }}>–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π</th>
                  <th className="px-4 py-2 text-left" style={{ width: '10%' }}>–ö–æ–Ω—Ç–∞–∫—Ç–∏</th>
                  <th className="px-4 py-2 text-left" style={{ width: '5%' }}>–î—ñ—ó</th>
                </tr>
              </thead>
              <tbody>
                {filteredWorkstations.map((ws) => (
                  <tr key={ws.id} className="border-b border-dark-border hover:bg-dark-bg transition-colors duration-200">
                    <td className="py-3 px-4 text-white" style={{ width: '5%', wordBreak: 'break-word' }}>{ws.id}</td>
                    <td className="py-3 px-4 text-white" style={{ width: '15%', wordBreak: 'break-word' }}>{ws.inventory_number}</td>
                    <td className="py-3 px-4 text-white" style={{ width: '10%', wordBreak: 'break-word' }}>{ws.ip_address}</td>
                    <td className="py-3 px-4 text-white" style={{ width: '15%', wordBreak: 'break-word' }}>{ws.mac_address}</td>
                    <td className="py-3 px-4" style={{ width: '15%', wordBreak: 'break-word' }}>{ws.grif}</td>
                    <td className="py-3 px-4 text-white" style={{ width: '15%', wordBreak: 'break-word' }}>{ws.department}</td>
                    <td className="py-3 px-4 text-white" style={{ width: '15%', wordBreak: 'break-word' }}>{ws.responsible}</td>
                    <td className="py-3 px-4 text-white" style={{ width: '10%', wordBreak: 'break-word' }}>{ws.contacts}</td>
                    <td className="py-3 px-4" style={{ width: '5%' }}>
                      <button
                        onClick={() => {
                          setSelectedWorkstation(ws);
                          setShowDetailsModal(true);
                        }}
                        className="text-gray-400 hover:text-white transition-colors duration-200 text-2xl font-bold"
                      >
                        ‚ò∞
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ê–†–ú */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center transition-opacity duration-300 ease-in-out z-50">
          <div className="bg-dark-card p-6 rounded-lg w-[600px] transform transition-all duration-300 ease-in-out scale-100">
            <h2 className="text-xl font-bold text-white mb-4">–î–æ–¥–∞—Ç–∏ –ê–†–ú</h2>
            <form onSubmit={handleAdd}>
              <div className="grid grid-cols-2 gap-4">
                {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è View */}
                {modalView === 'main' && (
                  <>
                    <div className="col-span-2">
                      <h3 className="text-lg font-semibold text-white mb-4">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä</label>
                      <div className="flex">
                        <span className="bg-dark-bg border border-dark-border border-r-0 rounded-l-lg px-4 py-2 text-white">–ê–†–ú-</span>
                        <input
                          type="text"
                          className="flex-1 bg-dark-bg border border-dark-border rounded-r-lg px-4 py-2 text-white"
                          value={formData.inventory_number.replace('–ê–†–ú-', '')}
                          onChange={(e) => setFormData({ ...formData, inventory_number: `–ê–†–ú-${e.target.value}` })}
                          required
                        />
                      </div>
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">IP –∞–¥—Ä–µ—Å–∞</label>
                      <input
                        type="text"
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.ip_address}
                        onChange={(e) => {
                          const value = e.target.value.replace(/[^0-9.]/g, '');
                          const parts = value.split('.');
                          if (parts.length <= 4) {
                            setFormData({ ...formData, ip_address: value });
                          }
                        }}
                        placeholder="192.168.1.1"
                        required
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">MAC –∞–¥—Ä–µ—Å–∞</label>
                      <input
                        type="text"
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.mac_address}
                        onChange={(e) => {
                          const value = e.target.value.replace(/[^0-9A-Fa-f]/g, '');
                          const parts = value.match(/.{1,2}/g) || [];
                          setFormData({ ...formData, mac_address: parts.join(':').toUpperCase() });
                        }}
                        placeholder="00:1A:2B:3C:4D:5E"
                        required
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–ì—Ä–∏—Ñ</label>
                      <select
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.grif}
                        onChange={(e) => setFormData({ ...formData, grif: e.target.value })}
                      >
                        <option value="–î–°–ö">–î–°–ö</option>
                        <option value="–û—Å–æ–±–ª–∏–≤–æ—ó –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ">–û—Å–æ–±–ª–∏–≤–æ—ó –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ</option>
                        <option value="–¶—ñ–ª–∫–æ–º —Ç–∞—î–º–Ω–æ">–¶—ñ–ª–∫–æ–º —Ç–∞—î–º–Ω–æ</option>
                        <option value="–¢–∞—î–º–Ω–æ">–¢–∞—î–º–Ω–æ</option>
                      </select>
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª</label>
                      <input
                        type="text"
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.department}
                        onChange={(e) => setFormData({ ...formData, department: e.target.value })}
                        list="departments"
                      />
                      <datalist id="departments">
                        <option value="IT –≤—ñ–¥–¥—ñ–ª" />
                        <option value="–ë–µ–∑–ø–µ–∫–∞" />
                        <option value="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è" />
                      </datalist>
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π</label>
                      <input
                        type="text"
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.responsible}
                        onChange={(e) => setFormData({ ...formData, responsible: e.target.value })}
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–ö–æ–Ω—Ç–∞–∫—Ç–∏</label>
                      <div className="flex">
                        <span className="bg-dark-bg border border-dark-border border-r-0 rounded-l-lg px-4 py-2 text-white">+380</span>
                        <input
                          type="tel"
                          className="flex-1 bg-dark-bg border border-dark-border rounded-r-lg px-4 py-2 text-white"
                          value={formData.contacts.replace('+380', '')}
                          onChange={(e) => {
                            const value = e.target.value.replace(/[^0-9]/g, '');
                            if (value.length <= 9) {
                              setFormData({ ...formData, contacts: `+380${value}` });
                            }
                          }}
                          placeholder="501234567"
                          required
                        />
                      </div>
                    </div>
                  </>
                )}

                {/* –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è View */}
                {modalView === 'additional' && (
                  <>
                    <div className="col-span-2">
                      <h3 className="text-lg font-semibold text-white mb-4">–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                    </div>
                    <div className="col-span-2">
                      <h4 className="text-base font-semibold text-white mb-4">–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                      <div className="grid grid-cols-2 gap-4">
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–ü—Ä–æ—Ü–µ—Å–æ—Ä</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.processor}
                            onChange={(e) => setFormData({ ...formData, processor: e.target.value })}
                            placeholder="Intel Core i5-10400 2.9GHz"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–û–ó–£</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.ram}
                            onChange={(e) => setFormData({ ...formData, ram: e.target.value })}
                            placeholder="16GB DDR4"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–ù–∞–∫–æ–ø–∏—á—É–≤–∞—á</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.storage}
                            onChange={(e) => setFormData({ ...formData, storage: e.target.value })}
                            placeholder="SSD 512GB"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.os}
                            onChange={(e) => setFormData({ ...formData, os: e.target.value })}
                            placeholder="Windows 10 Pro 64-bit"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–ú–æ–Ω—ñ—Ç–æ—Ä</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.monitor}
                            onChange={(e) => setFormData({ ...formData, monitor: e.target.value })}
                            placeholder="Dell P2419H 24"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–ú–µ—Ä–µ–∂–µ–≤–∞ –∫–∞—Ä—Ç–∞</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.network}
                            onChange={(e) => setFormData({ ...formData, network: e.target.value })}
                            placeholder="1Gbps"
                          />
                        </div>
                      </div>
                    </div>

                    {/* –ü—Ä–∏–º—ñ—Ç–∫–∏ */}
                    <div className="mb-4 col-span-2">
                      <h4 className="text-base font-semibold text-white mb-4">–ü—Ä–∏–º—ñ—Ç–∫–∏</h4>
                      <textarea
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.notes}
                        onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                        rows="3"
                      />
                    </div>
                  </>
                )}
              </div>

              {/* Navigation Buttons */}
              <div className="flex justify-between mt-6">
                {modalView === 'main' && (
                  <button
                    type="button"
                    className="flex items-center text-dark-textSecondary hover:text-white transition-colors duration-200"
                    onClick={() => setModalView('additional')}
                  >
                    –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è <span className="ml-2">‚Üí</span>
                  </button>
                )}
                {modalView === 'additional' && (
                  <button
                    type="button"
                    className="flex items-center text-dark-textSecondary hover:text-white transition-colors duration-200"
                    onClick={() => setModalView('main')}
                  >
                    ‚Üê –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                  </button>
                )}
                <div className="flex gap-4">
                  <button
                    type="button"
                    onClick={() => {
                      setShowAddModal(false);
                      setModalView('main');
                    }}
                    className="px-4 py-2 text-dark-textSecondary hover:text-white"
                  >
                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                  </button>
                  <button
                    type="submit"
                    className="bg-primary-500 text-white px-4 py-2 rounded-lg hover:bg-primary-600"
                  >
                    –î–æ–¥–∞—Ç–∏
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ê–†–ú */}
      {showEditModal && selectedWorkstation && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center transition-opacity duration-300 ease-in-out z-50">
          <div className="bg-dark-card p-6 rounded-lg w-[600px] transform transition-all duration-300 ease-in-out scale-100">
            <h2 className="text-xl font-bold text-white mb-4">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ê–†–ú</h2>
            <form onSubmit={handleEdit}>
              <div className="grid grid-cols-2 gap-4">
                {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è View */}
                {modalView === 'main' && (
                  <>
                    <div className="col-span-2">
                      <h3 className="text-lg font-semibold text-white mb-4">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä</label>
                      <div className="flex">
                        <span className="bg-dark-bg border border-dark-border border-r-0 rounded-l-lg px-4 py-2 text-white">–ê–†–ú-</span>
                        <input
                          type="text"
                          className="flex-1 bg-dark-bg border border-dark-border rounded-r-lg px-4 py-2 text-white"
                          value={formData.inventory_number.replace('–ê–†–ú-', '')}
                          onChange={(e) => setFormData({ ...formData, inventory_number: `–ê–†–ú-${e.target.value}` })}
                          required
                        />
                      </div>
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">IP –∞–¥—Ä–µ—Å–∞</label>
                      <input
                        type="text"
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.ip_address}
                        onChange={(e) => {
                          const value = e.target.value.replace(/[^0-9.]/g, '');
                          const parts = value.split('.');
                          if (parts.length <= 4) {
                            setFormData({ ...formData, ip_address: value });
                          }
                        }}
                        placeholder="192.168.1.1"
                        required
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">MAC –∞–¥—Ä–µ—Å–∞</label>
                      <input
                        type="text"
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.mac_address}
                        onChange={(e) => {
                          const value = e.target.value.replace(/[^0-9A-Fa-f]/g, '');
                          const parts = value.match(/.{1,2}/g) || [];
                          setFormData({ ...formData, mac_address: parts.join(':').toUpperCase() });
                        }}
                        placeholder="00:1A:2B:3C:4D:5E"
                        required
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–ì—Ä–∏—Ñ</label>
                      <select
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.grif}
                        onChange={(e) => setFormData({ ...formData, grif: e.target.value })}
                      >
                        <option value="–î–°–ö">–î–°–ö</option>
                        <option value="–û—Å–æ–±–ª–∏–≤–æ—ó –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ">–û—Å–æ–±–ª–∏–≤–æ—ó –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ</option>
                        <option value="–¶—ñ–ª–∫–æ–º —Ç–∞—î–º–Ω–æ">–¶—ñ–ª–∫–æ–º —Ç–∞—î–º–Ω–æ</option>
                        <option value="–¢–∞—î–º–Ω–æ">–¢–∞—î–º–Ω–æ</option>
                      </select>
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª</label>
                      <input
                        type="text"
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.department}
                        onChange={(e) => setFormData({ ...formData, department: e.target.value })}
                        list="departments"
                      />
                      <datalist id="departments">
                        <option value="IT –≤—ñ–¥–¥—ñ–ª" />
                        <option value="–ë–µ–∑–ø–µ–∫–∞" />
                        <option value="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è" />
                      </datalist>
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π</label>
                      <input
                        type="text"
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.responsible}
                        onChange={(e) => setFormData({ ...formData, responsible: e.target.value })}
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block text-dark-textSecondary mb-2">–ö–æ–Ω—Ç–∞–∫—Ç–∏</label>
                      <div className="flex">
                        <span className="bg-dark-bg border border-dark-border border-r-0 rounded-l-lg px-4 py-2 text-white">+380</span>
                        <input
                          type="tel"
                          className="flex-1 bg-dark-bg border border-dark-border rounded-r-lg px-4 py-2 text-white"
                          value={formData.contacts.replace('+380', '')}
                          onChange={(e) => {
                            const value = e.target.value.replace(/[^0-9]/g, '');
                            if (value.length <= 9) {
                              setFormData({ ...formData, contacts: `+380${value}` });
                            }
                          }}
                          placeholder="501234567"
                          required
                        />
                      </div>
                    </div>
                  </>
                )}

                {/* –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è View */}
                {modalView === 'additional' && (
                  <>
                    <div className="col-span-2">
                      <h3 className="text-lg font-semibold text-white mb-4">–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                    </div>
                    <div className="col-span-2">
                      <h4 className="text-base font-semibold text-white mb-4">–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                      <div className="grid grid-cols-2 gap-4">
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–ü—Ä–æ—Ü–µ—Å–æ—Ä</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.processor}
                            onChange={(e) => setFormData({ ...formData, processor: e.target.value })}
                            placeholder="Intel Core i5-10400 2.9GHz"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–û–ó–£</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.ram}
                            onChange={(e) => setFormData({ ...formData, ram: e.target.value })}
                            placeholder="16GB DDR4"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–ù–∞–∫–æ–ø–∏—á—É–≤–∞—á</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.storage}
                            onChange={(e) => setFormData({ ...formData, storage: e.target.value })}
                            placeholder="SSD 512GB"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.os}
                            onChange={(e) => setFormData({ ...formData, os: e.target.value })}
                            placeholder="Windows 10 Pro 64-bit"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–ú–æ–Ω—ñ—Ç–æ—Ä</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.monitor}
                            onChange={(e) => setFormData({ ...formData, monitor: e.target.value })}
                            placeholder="Dell P2419H 24"
                          />
                        </div>
                        <div className="mb-4">
                          <label className="block text-dark-textSecondary mb-2">–ú–µ—Ä–µ–∂–µ–≤–∞ –∫–∞—Ä—Ç–∞</label>
                          <input
                            type="text"
                            className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                            value={formData.network}
                            onChange={(e) => setFormData({ ...formData, network: e.target.value })}
                            placeholder="1Gbps"
                          />
                        </div>
                      </div>
                    </div>

                    {/* –ü—Ä–∏–º—ñ—Ç–∫–∏ */}
                    <div className="mb-4 col-span-2">
                      <h4 className="text-base font-semibold text-white mb-4">–ü—Ä–∏–º—ñ—Ç–∫–∏</h4>
                      <textarea
                        className="w-full bg-dark-bg border border-dark-border rounded-lg px-4 py-2 text-white"
                        value={formData.notes}
                        onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                        rows="3"
                      />
                    </div>
                  </>
                )}
              </div>

              {/* Navigation Buttons */}
              <div className="flex justify-between mt-6">
                {modalView === 'main' && (
                  <button
                    type="button"
                    className="flex items-center text-dark-textSecondary hover:text-white transition-colors duration-200"
                    onClick={() => setModalView('additional')}
                  >
                    –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è <span className="ml-2">‚Üí</span>
                  </button>
                )}
                {modalView === 'additional' && (
                  <button
                    type="button"
                    className="flex items-center text-dark-textSecondary hover:text-white transition-colors duration-200"
                    onClick={() => setModalView('main')}
                  >
                    ‚Üê –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                  </button>
                )}
                <div className="flex gap-4">
                  <button
                    type="button"
                    onClick={() => {
                      setShowEditModal(false);
                      setModalView('main');
                    }}
                    className="px-4 py-2 text-dark-textSecondary hover:text-white"
                  >
                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                  </button>
                  <button
                    type="submit"
                    className="bg-primary-500 text-white px-4 py-2 rounded-lg hover:bg-primary-600"
                  >
                    –ó–±–µ—Ä–µ–≥—Ç–∏
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è */}
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center transition-opacity duration-300 ease-in-out z-50">
          <div className="bg-dark-card p-6 rounded-lg w-96 transform transition-all duration-300 ease-in-out scale-100">
            <h2 className="text-xl font-bold text-white mb-4">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</h2>
            <p className="text-dark-textSecondary mb-4">
              –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ê–†–ú {selectedWorkstation?.inventory_number}?
            </p>
            <div className="flex justify-end space-x-4">
              <button
                onClick={() => setShowDeleteModal(false)}
                className="px-4 py-2 bg-dark-bg text-white rounded-lg hover:bg-dark-border"
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
              <button
                onClick={handleDelete}
                className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
              >
                –í–∏–¥–∞–ª–∏—Ç–∏
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é */}
      {showDetailsModal && selectedWorkstation && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center transition-opacity duration-300 ease-in-out z-50">
          <div className="bg-dark-card p-6 rounded-lg w-[800px] transform transition-all duration-300 ease-in-out scale-100">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-bold text-white">–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ê–†–ú</h2>
              <button
                onClick={() => setShowDetailsModal(false)}
                className="text-gray-400 hover:text-white transition-colors duration-200"
              >
                ‚úï
              </button>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div>
                <h3 className="text-lg font-semibold text-white mb-4">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                <div className="space-y-2">
                  <p className="text-gray-300"><span className="text-gray-400">ID:</span> {selectedWorkstation.id}</p>
                  <p className="text-gray-300"><span className="text-gray-400">–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä:</span> {selectedWorkstation.inventory_number}</p>
                  <p className="text-gray-300"><span className="text-gray-400">IP –∞–¥—Ä–µ—Å–∞:</span> {selectedWorkstation.ip_address}</p>
                  <p className="text-gray-300"><span className="text-gray-400">MAC –∞–¥—Ä–µ—Å–∞:</span> {selectedWorkstation.mac_address}</p>
                  <p className="text-gray-300"><span className="text-gray-400">–ì—Ä–∏—Ñ:</span> {selectedWorkstation.grif}</p>
                </div>
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white mb-4">–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                <div className="space-y-2">
                  <p className="text-gray-300"><span className="text-gray-400">–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª:</span> {selectedWorkstation.department}</p>
                  <p className="text-gray-300"><span className="text-gray-400">–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π:</span> {selectedWorkstation.responsible}</p>
                  <p className="text-gray-300"><span className="text-gray-400">–ö–æ–Ω—Ç–∞–∫—Ç–∏:</span> {selectedWorkstation.contacts}</p>
                  <p className="text-gray-300"><span className="text-gray-400">–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</span> {selectedWorkstation.registration_date}</p>
                </div>
              </div>
            </div>

            {/* –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-white mb-4">–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <p className="text-gray-300"><span className="text-gray-400">–ü—Ä–æ—Ü–µ—Å–æ—Ä:</span> Intel Core i5-10400 2.9GHz</p>
                  <p className="text-gray-300"><span className="text-gray-400">–û–ó–£:</span> 16GB DDR4</p>
                  <p className="text-gray-300"><span className="text-gray-400">–ù–∞–∫–æ–ø–∏—á—É–≤–∞—á:</span> SSD 512GB</p>
                </div>
                <div className="space-y-2">
                  <p className="text-gray-300"><span className="text-gray-400">–û–°:</span> Windows 10 Pro 64-bit</p>
                  <p className="text-gray-300"><span className="text-gray-400">–ú–æ–Ω—ñ—Ç–æ—Ä:</span> Dell P2419H 24"</p>
                  <p className="text-gray-300"><span className="text-gray-400">–ú–µ—Ä–µ–∂–µ–≤–∞ –∫–∞—Ä—Ç–∞:</span> 1Gbps</p>
                </div>
              </div>
            </div>

            {/* –ü—Ä–∏–º—ñ—Ç–∫–∏ */}
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-white mb-4">–ü—Ä–∏–º—ñ—Ç–∫–∏</h3>
              <div className="bg-dark-bg rounded-lg p-4">
                <p className="text-gray-300">{selectedWorkstation.notes || '–ù–µ–º–∞—î –ø—Ä–∏–º—ñ—Ç–æ–∫'}</p>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥—ñ–π */}
            <div className="mt-6 flex justify-end space-x-3">
              <button
                type="button"
                onClick={() => setShowDetailsModal(false)}
                className="px-4 py-2 text-gray-300 hover:text-white"
              >
                –ó–∞–∫—Ä–∏—Ç–∏
              </button>
              <button
                type="button"
                onClick={() => {
                  // Navigate to tickets
                  window.location.href = `/tickets?arm=${selectedWorkstation.inventory_number}`;
                }}
                className="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700"
              >
                –ó–∞—è–≤–∫–∏
              </button>
              <button
                type="button"
                onClick={() => {
                  // Navigate to repairs
                  window.location.href = `/repairs?arm=${selectedWorkstation.inventory_number}`;
                }}
                className="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700"
              >
                –†–µ–º–æ–Ω—Ç–∏
              </button>
              <button
                type="button"
                onClick={() => {
                  // Navigate to software
                  window.location.href = `/software?arm=${selectedWorkstation.inventory_number}`;
                }}
                className="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700"
              >
                –ü–ó
              </button>
              <button
                type="button"
                onClick={() => {
                  setShowEditModal(true);
                  setShowDetailsModal(false);
                }}
                className="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700"
              >
                –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
              </button>
              <button
                type="button"
                onClick={() => {
                  if (window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –ê–†–ú?')) {
                    handleDelete();
                    setShowDetailsModal(false);
                  }
                }}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
              >
                –í–∏–¥–∞–ª–∏—Ç–∏
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Workstations; 