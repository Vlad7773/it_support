
 
на тему: “Онлайн-інструмент для моніторингу стану техніки”
 
 
Виконав: курсант  4  курсу, групи 403    напряму підготовки (спеціальності)                               122  Комп'ютерні  науки  та             .         інформаційні  технології                     ю                    
                       (шифр і назва напряму підготовки, спеціальності) 
 



Київ-2025
АНОТАЦІЯ
кваліфікаційної роботи бакалавра на тему: 
“ Онлайн-інструмент для моніторингу стану техніки” 
 
 
Кваліфікаційна робота бакалавра містить: 82 сторінки, 23 рисунків, 19 джерел. 
В роботі розглянуто актуальні завдання та підходи до автоматизації моніторингу технічного стану військової техніки у військовій частині. Проведено дослідження нормативно-правового забезпечення процесів експлуатації та обліку техніки в Збройних Силах України, проаналізовано існуючі вітчизняні засоби автоматизації та світовий досвід у цій сфері. Визначено ключові архітектурні рішення, спроектовано структуру бази даних для системи моніторингу та обґрунтовано принципи забезпечення інформаційної безпеки розроблюваного онлайн-інструменту. Розроблено онлайн-інструмент для моніторингу стану техніки, що забезпечує автоматизований збір, обробку, зберігання та аналіз даних про технічний стан техніки, включаючи модулі для ведення обліку, реєстрації пробігу та формування аналітики. Запропонований інструмент має потенціал для підвищення оперативності та обґрунтованості управлінських рішень щодо технічного обслуговування, ремонту та експлуатації техніки, що сприятиме підтриманню належного рівня боєготовності військових частин. 	 
 
ABSTRACT 
of the qualification paper of bachelor on theme: 
“ Online tool for monitoring the condition of equipment ” 

The bachelor's qualification paper contains: 82 pages, 23 pictures, 19 sources. 
The paper considers current tasks and approaches to automation of monitoring the technical condition of military equipment in a military unit. A study of the regulatory and legal support of the processes of operation and accounting of equipment in the Armed Forces of Ukraine was conducted, existing domestic automation tools and world experience in this area were analyzed. The key architectural solutions were identified, the database structure for the monitoring system was designed, and the principles of ensuring the information security of the online tool under development were substantiated. An online tool for monitoring the condition of equipment has been developed that provides automated collection, processing, storage and analysis of data on the technical condition of equipment, including modules for keeping records, registering mileage and generating analytics. The proposed tool has the potential to increase the efficiency and validity of management decisions on the maintenance, repair and operation of equipment, which will help maintain an adequate level of combat readiness of military units.
 
ЗМІСТ

АНОТАЦІЯ	2
ЗМІСТ	4
ПЕРЕЛІК УМОВНИХ ПОЗНАЧЕНЬ	7
ВСТУП	8
РОЗДІЛ 1	9
ОБҐРУНТУВАННЯ НЕОБХІДНОСТІ РОЗРОБКИ ОНЛАЙН-ІНСТРУМЕНТУ ДЛЯ МОНІТОРИНГУ СТАНУ ТЕХНІКИ У ВІЙСЬКОВІЙ ЧАСТИНІ	9
1.1.	Аналіз нормативно-правового регулювання та існуючої практики моніторингу технічного стану техніки у Збройних Силах України.	10
1.2.	Аналіз існуючих підходів та засобів автоматизації моніторингу стану військової техніки в Україні.	17
1.3.	Аналіз світового досвіду щодо автоматизації процесів моніторингу та контролю стану військової техніки	21
1.4.	Технічне завдання на проектування	26
Висновок до Розділу 1	27
РОЗДІЛ 2. ТЕОРЕТИЧНІ ЗАСАДИ ТА ПРОЕКТУВАННЯ ОНЛАЙН-ІНСТРУМЕНТУ МОНІТОРИНГУ СТАНУ ТЕХНІКИ	28
2.1.	Обґрунтування вибору архітектури онлайн-інструменту та розробка її узагальненої структурної схеми.	28
2.2.	Проектування бази даних системи моніторингу стану техніки.	34
2.3.	Принципи та методи забезпечення безпеки інформації в онлайн-інструменті.	38
Добре, ось текст для підрозділу 2.3 "Принципи та методи забезпечення безпеки інформації в онлайн-інструменті", що враховує ваші вимоги:	38
2.3. Принципи та методи забезпечення безпеки інформації в онлайн-інструменті	38
Висновок до Розділу 2	42
РОЗДІЛ 3. ПРАКТИЧНА РЕАЛІЗАЦІЯ ОНЛАЙН-ІНСТРУМЕНТУ ДЛЯ МОНІТОРИНГУ СТАНУ ТЕХНІКИ	44
3.1. Обґрунтування вибору інструментальних засобів та технологій для розробки онлайн-інструменту.	44
3.2. Розробка програмних модулів онлайн-інструменту.	50
3.2.1. Реалізація серверної логіки та прикладного програмного інтерфейсу.	50
3.2.2. Реалізація клієнтської частини та користувацьких інтерфейсів.	54
3.2.3. Розробка та інтеграція модуля управління доступом та розмежування прав користувачів.	60
3.3. Розгортання онлайн-інструменту.	63
Висновок до Розділу 3	66
ВИСНОВКИ	68
СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ	70
ДОДАТОК А	72
Vehicle.js	72
VehicleComponent.js	72
Repair.js	73
RepairComponent.js	74
Maintenance.js	74
MileageLog.js	75
User.js	75
VehicleService.js	76
MileageLogService.js	79
vehicle.dto.js	80
authController.js	83



 
ПЕРЕЛІК УМОВНИХ ПОЗНАЧЕНЬ


АІС – Автоматизована інформаційна система
API – Прикладний програмний інтерфейс (Application Programming Interface)
АТ – Автомобільна техніка
БД – База даних
ГШ – Генеральний штаб
ЗСУ – Збройні Сили України
ІС – Інформаційна система
ІТ – Інформаційні технології
МОУ – Міністерство оборони України
МПЗ – Методичний посібник з переведення ОВТ на сезонну експлуатацію
НД – Нормативний документ
ОВТ – Озброєння та військова техніка
ПЗ – Програмне забезпечення
ПММ – Пально-мастильні матеріали
РБД – Реляційна база даних
СУБД – Система управління базами даних
ТЗ – Транспортний засіб 
ТО – Технічне обслуговування
ТО-1 – Технічне обслуговування №1
ТО-2 – Технічне обслуговування №2
СТО – Сезонне технічне обслуговування
ЩТО – Щоденне технічне обслуговування
UI – Користувацький інтерфейс (User Interface) 
UX – Досвід користувача (User Experience) 
CRUD – Створення, Читання, Оновлення, Видалення (Create, Read, Update, Delete) 
 
ВСТУП


	Актуальність теми. Автоматизація процесів у Збройних Силах України є ключовим фактором підвищення їх ефективності, однак поточний стан у сфері моніторингу технічного військової техніки не завжди дозволяє оперативно та повною мірою вирішувати поставлені завдання. Потреба вдосконалення цих процесів є надзвичайно актуальною, оскільки від технічної готовності техніки безпосередньо залежить боєздатність підрозділів та здатність армії швидко реагувати на сучасні виклики. Зокрема, у сфері контролю за станом військової техніки у військовій частині саме автоматизація збору, обліку та аналізу даних має вагоме значення для ефективного планування експлуатації, обслуговування, ремонту та раціонального використання наявних ресурсів.
Мета роботи: розробка онлайн-інструменту для моніторингу стану озброєння та військової техніки у військовій частині, що передбачає теоретичне обґрунтування його структури та функціоналу, проектування ключових компонентів та практичну реалізацію програмного рішення.
Виходячи з мети роботи, виникають наступні завдання: 
–	обґрунтувати необхідність розробки онлайн-інструменту для моніторингу стану техніки шляхом аналізу нормативно-правової бази ЗСУ, існуючих практик обліку та контролю, а також світового досвіду автоматизації подібних процесів; 
–	розробити концептуальну архітектуру онлайн-інструменту, спроектувати структуру його бази даних та визначити основні принципи й методи забезпечення безпеки інформації в системі; 
–	здійснити програмну реалізацію основних функціональних модулів онлайн-інструменту для моніторингу стану техніки та продемонструвати його готовність до розгортання.
Об’єкт досліджень: процеси моніторингу, обліку та управління технічним станом озброєння та військової техніки у військовій частині.
Предмет досліджень: моделі, методи та програмні засоби для створення онлайн-інструменту моніторингу стану озброєння та військової техніки, включаючи його архітектуру, компоненти бази даних, програмні модулі та механізми захисту інформації.
 
РОЗДІЛ 1
ОБҐРУНТУВАННЯ НЕОБХІДНОСТІ РОЗРОБКИ ОНЛАЙН-ІНСТРУМЕНТУ ДЛЯ МОНІТОРИНГУ СТАНУ ТЕХНІКИ У ВІЙСЬКОВІЙ ЧАСТИНІ


На сучасному етапі розвитку Збройних Сил України питання ефективного моніторингу технічного стану військової техніки набуває особливої гостроти, безпосередньо впливаючи на боєготовність підрозділів.
Однак, у військових частинах процеси збору, обліку та аналізу даних про стан техніки часто здійснюються за допомогою застарілих, недостатньо автоматизованих методів, що не завжди відповідає сучасним вимогам оперативності та повноти інформації.
У цьому розділі буде проведено всебічний аналіз існуючої ситуації, розглянуто нормативно-правове підґрунтя, вітчизняний та світовий досвід, а також обґрунтовано нагальну необхідність розробки сучасного онлайн-інструменту для моніторингу стану техніки у військовій частині.

1.1.	Аналіз нормативно-правового регулювання та існуючої практики моніторингу технічного стану техніки у Збройних Силах України. 
На даний час функціонування Збройних Сил України забезпечення належного технічного стану озброєння та військової техніки (ОВТ) є одним із пріоритетних завдань, що безпосередньо впливає на їх боєздатність та ефективність виконання завдань за призначенням. Система моніторингу, обліку та контролю технічного стану ОВТ у військових частинах значною мірою продовжує спиратися на процедури, що передбачають ведення паперової документації та ручну обробку даних. Це особливо помітно при підготовці зведених звітів про технічний стан, наявність та рух ОВТ, які часто формуються на паперових носіях, що ускладнює оперативний аналіз.
 
Рисунок 1.1 Журнал обліку роботи автомобільної техніки

Як наслідок, відповідальні посадові особи (начальники служб, командири підрозділів, інженерно-технічний склад) змушені витрачати значний час на виконання рутинних операцій, що негативно позначається на оперативності прийняття управлінських рішень та ефективності використання робочого часу.
Правовою основою для організації експлуатації, обліку та контролю технічного стану ОВТ у ЗСУ є низка керівних документів Міністерства оборони України (МОУ) та Генерального штабу ЗСУ. Ключовим документом, що регламентує питання обліку всього військового майна, є Інструкція з обліку військового майна у Збройних Силах України, затверджена Наказом Міністерства оборони України від 17.08.2017 № 440. Ця Інструкція визначає загальні засади організації та ведення обліку військового майна, зокрема:
–	порядок документального оформлення операцій з приймання, зберігання, видачі (відправлення), списання військового майна, включаючи ОВТ;
–	організацію оперативного, кількісного (у натуральних показниках) та якісного (за категоріями, ступенем придатності, технічним станом) обліку наявності та руху військового майна;
–	обов'язки посадових осіб щодо своєчасного, повного та достовірного ведення обліку;
–	перелік основних облікових документів (книги, картки, відомості, акти), що ведуться у службах забезпечення та військових частинах. Згідно з цією інструкцією, кожна одиниця ОВТ має бути взята на облік, їй присвоюється інвентарний (номенклатурний, заводський) номер, і на неї ведуться відповідні облікові документи, що відображають її технічний стан та історію експлуатації.
Особливості експлуатації та моніторингу технічного стану автомобільної техніки деталізуються в Інструкції про порядок використання автомобільної техніки у Збройних Силах України (далі – Інструкція з використання АТ), до якої вносилися зміни, Наказом Міністерства оборони України № 70 від 01.01.2013 року “Про внесення змін до Інструкції про порядок використання автомобільної техніки у Збройних Силах України”. Ця Інструкція встановлює єдиний порядок використання АТ та спрямована на підтримання її у постійній технічній готовності. Вона регламентує, зокрема, планування використання АТ, де наголошується на необхідності раціонального використання моторесурсів. 
Планування експлуатації є невід'ємною частиною планування діяльності військової частини. Як правило, у військовій частині розробляються "Річний план експлуатації та ремонту озброєння та військової техніки військової частини"(рис 1.2) та, на його основі, "Місячний план експлуатації та ремонту озброєння та військової техніки військової частини"(рис 1.3). Ці документи є загальними для всіх типів ОВТ, включаючи автомобільну техніку, і їх розробка регламентується більш загальними керівними документами з організації експлуатації та ремонту ОВТ. У цих планах визначаються потреби у використанні АТ, ліміти витрати моторесурсів, пально-мастильних матеріалів, а також терміни проведення технічного обслуговування та ремонту. 
 
 
Рисунок 1.2 Річний план експлуатації та ремонту озброєння та військової техніки військової частини

   
Рисунок 1.3 Місячний план експлуатації та ремонту озброєння та військової техніки військової частини

Також Інструкцією визначається порядок допуску водіїв та техніки до експлуатації, що включає перевірку знань водіями правил експлуатації та матеріальної частини, а також ретельний контроль технічного стану АТ перед використанням.
Важливою складовою є система технічного обслуговування АТ. Вона передбачає проведення щоденного технічного обслуговування (ЩТО) силами водія, контрольних оглядів перед виходом з парку та після повернення, планових технічних обслуговувань (ТО-1, ТО-2) за встановленою періодичністю або пробігом, а також сезонного технічного обслуговування (СТО) при підготовці до літнього та зимового періодів експлуатації. Кожен вид ТО має чітко визначений перелік обов'язкових операцій, спрямованих на виявлення та усунення несправностей, підтримання належного рівня технічної готовності та безпеки АТ.
Контроль технічного стану АТ здійснюється на різних рівнях: посадовими особами автомобільної служби військової частини, командирами підрозділів, за якими закріплена техніка, черговим по парку та начальником контрольно-технічного пункту (КТП) при випуску машин з парку та їх поверненні. Техніка, що не відповідає встановленим вимогам безпеки або має несправності, що загрожують безпеці руху чи можуть призвести до більш серйозних поломок, до експлуатації не допускається до повного усунення виявлених недоліків.
Інструкція з використання АТ також встановлює основну документацію, пов'язану з експлуатацією та фіксацією технічного стану автомобільної техніки: 
–	дорожній лист. Є основним первинним документом обліку роботи автомобіля та водія, підставою для списання пального та обліку пробігу. У ньому обов'язково робляться відмітки про технічну справність автомобіля перед виходом з парку, засвідчені підписом начальника КТП або іншої відповідальної особи, та при поверненні, а також про проходження водієм передрейсового медичного огляду. 
–	паспорт-формуляр машини. Це головний документ, що супроводжує одиницю техніки протягом усього її життєвого циклу. Він містить детальні відомості про машину, її комплектність, основні технічні характеристики, дані про реєстрацію, облік загального напрацювання, відомості про всі проведені технічні обслуговування, ремонти, із зазначенням замінених агрегатів, вузлів та деталей, а також про будь-які зміни у технічному стані та комплектності. 
–	книга огляду озброєння, військової техніки та боєприпасів підрозділу: В ній фіксуються результати періодичних оглядів техніки командирами підрозділів, їх заступниками з озброєння (технічної частини) та вищими начальниками, виявлені під час оглядів недоліки та встановлені терміни їх усунення. 
–	журнал контролю технічного стану автомобільної техніки при виході з парку та поверненні до парку. Ведеться на контрольно-технічному пункті (КТП) військової частини. У журналі фіксується час вибуття та прибуття кожної машини, її технічний стан, показання спідометра, залишок пального, підписи водія та чергового по КТП. 
–	акт технічного стану автомобільної техніки. Складається комісійно для детального визначення фактичного технічного стану машини в різних випадках: при передачі техніки між підрозділами або військовими частинами, при постановці на тривале зберігання, для обґрунтування потреби та обсягу ремонту (поточного, середнього, капітального), або для підготовки документів на списання техніки, що вичерпала свій ресурс або не підлягає відновленню.
–	картка обліку роботи автомобільної шини та картка обліку роботи акумуляторної батареї. Ці документи дозволяють вести детальний облік напрацювання автомобільних шин та терміну служби акумуляторних батарей, що є важливим для контролю за їх раціональним використанням, прогнозування потреби в заміні та планування відповідних витрат.
Проведення заходів щодо переведення АТ на літню (зимову) експлуатацію, що є невід'ємною частиною моніторингу та підтримання належного технічного стану, деталізується у Методичному посібнику з планування, організації та проведення заходів щодо переведення озброєння та військової техніки на літню (зимову) експлуатацію у Збройних Силах України. Ці заходи включають поглиблену перевірку технічного стану, виконання робіт з сезонного обслуговування та оформлення відповідної документації.
На практиці, незважаючи на детальну регламентацію, процеси збору та узагальнення даних про технічний стан АТ є надзвичайно трудомісткими. Інформація з дорожніх листів, журналів КТП, книг огляду, паспортів-формулярів агрегується вручну для складання звітів та донесень. Наприклад, для аналізу напрацювання парку АТ за місяць або для визначення потреби в ТО-1 чи ТО-2 для кожної машини, необхідно обробити значний масив паперових документів. Це не тільки займає багато часу, але й збільшує ризик помилок, ускладнює оперативний контроль за витратою моторесурсів та ПММ, а також за своєчасністю проведення технічних обслуговувань.
Отже, чинна система моніторингу технічного стану ОВТ, і автомобільної техніки зокрема, у ЗСУ, хоч і має розгалужене нормативно-правове підґрунтя, на практичному рівні у військових частинах залишається значною мірою залежною від ручних операцій та паперового документообігу. Це створює суттєві перешкоди для ефективного управління технічним забезпеченням, збільшує адміністративне навантаження на особовий склад та не повною мірою відповідає сучасним вимогам щодо оперативності, точності даних та цифрової трансформації в оборонній сфері, що й зумовлює нагальну потребу в розробці сучасних автоматизованих інструментів.

1.2.	 Аналіз існуючих підходів та засобів автоматизації моніторингу стану військової техніки в Україні. 
Прагнення до підвищення ефективності управління Збройними Силами України, особливо в умовах сучасних викликів, зумовлює нагальну потребу в цифровій трансформації та автоматизації ключових процесів, включаючи облік та моніторинг стану озброєння та військової техніки. Незважаючи на усвідомлення цієї необхідності та певні кроки в напрямку цифровізації, станом на сьогоднішній день у ЗСУ все ще триває процес становлення єдиної, комплексної та всеохоплюючої автоматизованої системи, яка б дозволяла в режимі реального часу здійснювати детальний моніторинг саме технічного стану кожної одиниці ОВТ.
У повсякденній діяльності підрозділів, відповідальних за експлуатацію та ремонт техніки, для вирішення нагальних завдань обліку та контролю часто застосовуються загальнодоступні офісні програмні продукти. Зокрема, табличні процесори, такі як Microsoft Excel, нерідко використовуються для створення імпровізованих баз даних ОВТ підрозділу, ведення графіків технічного обслуговування, обліку напрацювання та витрати пально-мастильних матеріалів, а також для фіксації переліку несправностей та історії ремонтів на локальному рівні. Подібним чином можуть використовуватися й системи управління базами даних, наприклад Microsoft Access (рис. 1.4), для більш структурованого зберігання інформації. Перевагою такого підходу є доступність та гнучкість цих інструментів, що дозволяє швидко адаптувати їх під конкретні потреби без значних витрат. Однак, подібні рішення характеризуються суттєвими недоліками, серед яких головними є відсутність централізації та стандартизації даних, що унеможливлює їх ефективне узагальнення на вищих рівнях управління, а також потенційні проблеми із забезпеченням належного рівня інформаційної безпеки та цілісності даних.

Рисунок 1.4 Excel таблиця обліку автотранспорту 

Найбільш значущим та системним кроком у напрямку модернізації та уніфікації процесів управління ресурсами в Збройних Силах України є впровадження комплексної автоматизованої системи на базі програмного забезпечення SAP S/4HANA(рис 1.5). Ця ERP-система (Enterprise Resource Planning) призначена для комплексного управління широким спектром процесів, включаючи логістику, фінанси, закупівлі та управління активами, до яких належить і військова техніка. У контексті управління ОВТ, відповідні модулі SAP, наприклад, SAP Plant Maintenance (PM) для управління технічним обслуговуванням та ремонтами або SAP Asset Management (AM) для управління основними фондами, надають інструментарій для централізованого ведення детального реєстру техніки, планування й обліку заходів з технічного обслуговування, управління запасами необхідних частин та матеріалів, а також для обліку експлуатаційних витрат. Впровадження такої потужної системи є стратегічним проєктом, спрямованим на підвищення прозорості, ефективності логістичних та облікових процесів, а також наближення до стандартів НАТО. Однак, повномасштабне розгортання, конфігурування під специфічні потреби моніторингу саме технічного стану в динаміці та навчання великої кількості користувачів є складним, тривалим та ресурсомістким процесом.



Рисунок 1.5 Структура таблиць SAP Plant Maintenance для управління технічним обслуговуванням та ремонтами

Незважаючи на використання перелічених інструментів – від локальних 
рішень на базі офісного ПЗ до масштабних ERP-систем – впровадження та ефективне використання автоматизованих систем моніторингу технічного стану ОВТ стикається з низкою загальних викликів. До них належать необхідність забезпечення повноти та актуальності первинних даних, інтеграція розрізнених інформаційних ресурсів, забезпечення надійної технічної інфраструктури та каналів зв'язку, високі вимоги до безпеки даних, а також потреба у підготовці кваліфікованого персоналу.
Підсумовуючи, можна констатувати, що в Збройних Силах України здійснюються активні кроки в напрямку автоматизації обліку та управління військовою технікою, зокрема через впровадження сучасних ERP-рішень. Проте, використання електронних таблиць для локальних потреб та наявність застарілих локальних баз даних свідчать про поступовий і неоднорідний перехід до цифрових інструментів. У цьому контексті, розробка спеціалізованого, зручного у використанні онлайн-інструменту, орієнтованого саме на оперативний моніторинг та аналіз технічного стану ОВТ, може суттєво доповнити існуючі системи та задовольнити нагальні потреби військових частин у швидкому доступі до актуальної інформації для прийняття обґрунтованих управлінських рішень.

1.3.	Аналіз світового досвіду щодо автоматизації процесів моніторингу та контролю стану військової техніки
Передові збройні сили світу, зокрема країни-члени НАТО, вже тривалий час приділяють значну увагу впровадженню та розвитку автоматизованих систем для моніторингу, контролю технічного стану та управління життєвим циклом озброєння та військової техніки (ОВТ). Така увага зумовлена розумінням, що високий рівень технічної готовності ОВТ є ключовим фактором боєздатності військ, а оптимізація процесів обслуговування та ремонту дозволяє значно скоротити експлуатаційні витрати та підвищити ефективність використання ресурсів. Сучасні підходи базуються на концепціях обслуговування за фактичним станом (Condition-Based Maintenance, CBM) та розширеного обслуговування за станом (Condition-Based Maintenance Plus, CBM+), які передбачають перехід від планово-попереджувальних регламентних робіт до прогнозованого обслуговування на основі даних, зібраних у реальному часі.
Загальними тенденціями в автоматизації цих процесів на міжнародному рівні є широке застосування бортових сенсорів та систем моніторингу справності та використання (Health and Usage Monitoring Systems, HUMS) для збору даних про роботу ключових вузлів та агрегатів ОВТ. Ці дані інтегруються у єдині інформаційно-аналітичні системи, що дозволяють відстежувати історію експлуатації, прогнозувати виникнення несправностей та оптимізувати графіки технічного обслуговування. Активно використовуються потужні програмні платформи для управління логістикою, технічним обслуговуванням, ремонтами та постачанням запасних частин (MRO – Maintenance, Repair, and Overhaul software). Все частіше застосовуються технології штучного інтелекту (AI) та машинного навчання (ML) для аналізу великих обсягів даних (Big Data) з метою виявлення прихованих закономірностей, прогнозування залишкового ресурсу компонентів та підвищення точності діагностики. При цьому велике значення надається забезпеченню взаємодії між різними системами та рівнями управління для створення єдиного інформаційного простору в сфері технічного забезпечення.
Яскравим прикладом комплексного підходу є система Global Combat Support System-Army(рис. 1.6), що використовується армією США. Побудована на базі ERP-системи SAP, GCSS-Army інтегрує функції управління постачанням, майном, фінансами, а також технічним обслуговуванням та ремонтом ОВТ. Система дозволяє вести облік кожної одиниці техніки, відстежувати її технічний стан, історію експлуатації, планувати та контролювати виконання робіт з технічного обслуговування, замовляти запасні частини та керувати складськими запасами. Важливою складовою розвитку цього напрямку в армії США є ініціатива Condition-Based Maintenance Plus (CBM+), яка передбачає інтеграцію даних з бортових сенсорів та діагностичних систем ОВТ (наприклад, для танків Abrams, вертольотів Apache) у GCSS-Army та інші аналітичні платформи. Це спрямовано на перехід до проактивного, прогнозованого обслуговування, що значно підвищує боєготовність техніки та оптимізує витрати на її утримання.
 
Рисунок 1.6 Приклад таблиці обліку техніки в Global Combat Support System-Army

Збройні сили Франції також приділяють значну увагу цифровізації процесів технічного забезпечення, особливо в рамках масштабної програми модернізації сухопутних військ SCORPION. Для управління технічним обслуговуванням наземної техніки історично використовувалася система SIMAT(рис. 1.7) (Système d’Information de la Maintenance du Matériel Terrestre), яка забезпечувала облік парку техніки, планування та контроль робіт з обслуговування та ремонту, управління запасними частинами. В контексті програми SCORPION, яка передбачає введення в експлуатацію новітніх зразків ОВТ, таких як бронемашини Griffon, Jaguar, Serval, з високим ступенем інтеграції бортових електронних систем, розвиваються і системи інформаційної підтримки їх життєвого циклу. Це включає в себе збір даних про стан техніки в режимі, близькому до реального часу, їх аналіз для оптимізації програм обслуговування та забезпечення високого коефіцієнта технічної готовності новітніх бойових платформ. Ключовим елементом є інтеграція даних про стан техніки з загальною системою бойового управління та логістики.
 
Рисунок 1.7 Приклад використання системи SIMAT для обліку ОВТ

На рівні міждержавної взаємодії в рамках НАТО важливу роль відіграє комплекс програмних засобів LOGFAS (Logistics Functional Area Services). Цей інтегрований набір інструментів використовується НАТО та країнами-партнерами для підтримки логістичного планування та забезпечення операцій і навчань. LOGFAS(рис. 1.8) дозволяє збирати, зберігати, обробляти, аналізувати та відображати інформацію для підтримки логістичних операцій, включаючи дані про потреби військ, наявність та стан ОВТ, транспортні можливості та інфраструктуру. Система сприяє координації зусиль багатонаціональних контингентів, управлінню рухом військ та вантажів, а також забезпеченню видимості логістичної обстановки, що опосередковано впливає на ефективність використання та підтримання техніки. Впровадження елементів LOGFAS в Україні також спрямоване на покращення обліку та контролю, зокрема за міжнародною військово-технічною допомогою, та інтеграцію до логістичних стандартів Альянсу.
 
Рисунок 1.8 Приклад використання системи обліку техніки НАТО LOGFAS

Ці приклади демонструють, що провідні країни активно інвестують у розробку та впровадження комплексних інформаційних систем, які дозволяють не просто вести облік ОВТ, а й активно управляти її технічним станом протягом усього життєвого циклу. Ключовими принципами таких систем є інтеграція даних, аналітичні можливості для прогнозування, підтримка прийняття рішень на всіх рівнях та забезпечення високої бойової готовності техніки при оптимальних витратах.
Підсумовуючи, досвід передових країн свідчить про те, що ефективна автоматизація моніторингу стану ОВТ базується на поєднанні впровадженні відповідних доктрин та стандартів, навчання персоналу та технологічних рішень. Для України вивчення та адаптація цього досвіду є надзвичайно важливим для побудови власної сучасної та ефективної системи моніторингу технічного стану ОВТ, що відповідатиме актуальним потребам Збройних Сил.
 


1.4.	Технічне завдання на проектування
Виходячи з вказаних вище задач було прийняте рішення розробити онлайн систему обліку техніки. Це програмне забезпечення призначене для організації процедури моніторингу стану військової техніки військової частини на основі встановлених керівними документами технічних показників; автоматизованого розрахунку основних показників транспортних засобів, ведення зручного обліку ремонтів та технічних обслуговувань в підрозділах.
Онлайн інструмент повинен забезпечувати виконання наступних функцій: 
–	організація процедури моніторингу стану військової техніки та її агрегатів згідно керівних документів;
–	функціонал для ведення обліку ремонтів транспортних засобів та технічних обслуговувань, що дозволяють командиру легко розпланувати використання військової техніки; 
–	генерація актуальної аналітики та ведення статистики ремонтів та ТО техніки; 
–	редагування формалізованих даних у цифровізованому паспорті-формулярі транспортних засобів частини; 
–	розмежування транспортних засобів по підрозділам та прив’язка до командира цього підрозділу;
–	автоматизація реєстрації пробігу транспортних засобів черговими службами;
–	забезпечення надійності та безпеки даних на рівні програмної логіки розподіленої інформаційної системи та на рівні комунікаційних з’єднань. 
Кінцевими користувачами системи повинні бути командири підрозділів в яких знаходиться техніка, командир частини, адміністратор мережевих сервісів військової частини та чергові служби автопарків військової частини. 

Система повинна структурно складатись з наступних частин: 
1.	серверна частина, призначена для централізованої обробки та зберігання даних, що необхідні для роботи онлайн інструменту; 
2.	клієнтська частина, для зручного використання системи користувачами. 

Висновок до Розділу 1
У даному розділі розкрито особливості нормативно-правового регулювання та існуючої практики моніторингу технічного стану військової техніки в Збройних Силах України. Проаналізовано наявні підходи та засоби автоматизації цих процесів в Україні, зокрема використання офісного програмного забезпечення, локальних баз даних та впровадження комплексних систем управління ресурсами. Наведено приклади шляхів автоматизації моніторингу та контролю стану військової техніки у збройних силах провідних країн світу та НАТО. Сформульовано загальне технічне завдання на проектування онлайн-інструменту для моніторингу стану техніки у військовій частині.
 
РОЗДІЛ 2. ТЕОРЕТИЧНІ ЗАСАДИ ТА ПРОЕКТУВАННЯ ОНЛАЙН-ІНСТРУМЕНТУ МОНІТОРИНГУ СТАНУ ТЕХНІКИ


Після всебічного обґрунтування актуальності та необхідності розробки онлайн-інструменту для моніторингу стану техніки у військовій частині, а також формування технічного завдання на його проектування, що було викладено у попередньому розділі, даний розділ присвячений закладенню теоретичних основ та безпосередньому процесу проектування зазначеної системи. Ефективна реалізація поставлених завдань вимагає ретельного підходу до вибору архітектурних рішень, створення надійної структури зберігання даних та забезпечення належного рівня інформаційної безпеки.
У цьому розділі буде детально розглянуто ключові етапи проектування онлайн-інструменту. Зокрема, буде здійснено обґрунтування вибору оптимальної архітектури системи та розроблено її узагальнену структурну схему, що визначить основні компоненти та взаємозв'язки між ними. Далі буде представлено процес проектування бази даних, включаючи розробку моделі даних, необхідної для ефективного обліку, зберігання та обробки інформації про технічний стан ОВТ, її обслуговування та ремонти. Особливу увагу буде приділено розгляду теоретичних принципів та практичних методів забезпечення безпеки інформації в онлайн-інструменті, що є критично важливим аспектом для систем, призначених для використання у військовій сфері.

2.1.	Обґрунтування вибору архітектури онлайн-інструменту та розробка її узагальненої структурної схеми. 
Прийняття обґрунтованого рішення щодо архітектури є фундаментальним етапом при розробці будь-якої програмної системи, оскільки воно визначає її структуру, спосіб взаємодії компонентів, масштабованість, надійність та можливості подальшого розвитку. Для розробки онлайн-інструменту моніторингу стану техніки у військовій частині, з урахуванням вимог, визначених у технічному завданні (підрозділ 1.4), було обрано клієнт-серверну архітектуру з монолітною реалізацією серверної частини.
Клієнт-серверна архітектура є концепцією інформаційної мережі, де основна частина обчислювальних ресурсів, даних та бізнес-логіки зосереджена на серверах, які обслуговують запити від клієнтів. Така архітектура зазвичай включає три основні типи компонентів (рис. 2.1):
–	сервери: програмні комплекси, що надають доступ до баз даних, виконання бізнес-логіки або обробка запитів іншим програмам (клієнтам).
–	клієнти: програми або пристрої, які ініціюють запити до серверів та використовують надані ними сервіси для виконання завдань користувача. У випадку онлайн-інструменту, типовим клієнтом є веб-браузер.
–	мережа: комунікаційне середовище, що забезпечує взаємодію між клієнтами та серверами за допомогою стандартизованих протоколів обміну даними.
 
Рисунок 2.1 Схема клієнт-серверної архітектури

Логічно, в клієнт-серверній системі можна виділити три рівні операцій(рис. 2.2):
–	рівень представлення даних (Presentation Tier): Відповідає за взаємодію з користувачем, відображення інформації та отримання команд (інтерфейс користувача).
–	прикладний рівень (Application Tier / Business Logic Tier): Реалізує основну логіку застосунку, обробляє дані відповідно до бізнес-правил.
–	рівень управління даними (Data Tier): Забезпечує зберігання, доступ, цілісність та управління даними, зазвичай реалізується за допомогою систем управління базами даних (СУБД).
 
Рисунок 2.2 Рівні клієнт-серверної архітектури

Залежно від розподілу цих функцій між клієнтом та сервером, розрізняють моделі "тонкого" та "товстого" клієнта. У моделі "тонкого клієнта", яка є типовою для веб-додатків, основна логіка додатку та управління даними зосереджені на сервері, а клієнт  відповідає переважно за відображення інформації. Це забезпечує кросплатформність та спрощує оновлення системи, оскільки зміни вносяться переважно на сервері.
Вибір клієнт-серверної монолітної архітектури для онлайн-інструменту моніторингу стану техніки зумовлений низкою факторів, що оптимально відповідають вимогам технічного завдання та специфіці даного проекту.
Застосування клієнт-серверної моделі забезпечує важливі переваги, такі як централізоване управління даними та основною бізнес-логікою. Це дозволяє зосередити всю критичну інформацію про техніку, її стан, історію ремонтів та технічних обслуговувань на захищеному сервері, гарантуючи цілісність, актуальність та контрольований доступ для всіх визначених категорій користувачів – від командирів підрозділів до чергових служб, як це передбачено технічним завданням. Крім того, використання веб браузера в якості "тонкого" клієнта надає легкий та універсальний доступ до системи з різних пристроїв без необхідності встановлення спеціалізованого програмного забезпечення, що значно спрощує розгортання та подальшу підтримку інструменту. Такий підхід також сприяє чіткому розмежуванню функцій: клієнтська частина відповідає за інтерфейс та взаємодію з користувачем, тоді як серверна частина бере на себе обробку запитів, реалізацію бізнес-логіки та взаємодію з базою даних, що полегшує як розробку, так і розуміння загальної структури системи.
Рішення реалізувати серверну частину у вигляді монолітної архітектури на початковому етапі проєкту також має свої переваги. Для системи з чітко окресленим набором функцій, таких як моніторинг стану, облік ремонтів та ТО, генерація аналітичних звітів, редагування цифрових паспортів-формулярів, розмежування доступу та реєстрація пробігу, монолітна структура дозволяє досягти відносної простоти та швидкості розробки і розгортання першої версії продукту. Усі компоненти серверної логіки знаходяться в єдиному кодовому просторі, що спрощує їх взаємодію, тестування на ранніх стадіях та розгортання. Взаємопов'язаний функціонал, описаний у технічному завданні, ефективно реалізується в рамках моноліту з меншими накладними витратами на комунікацію порівняно з розподіленими архітектурами, наприклад, мікросервісною. Нарешті, забезпечення надійності та безпеки даних, що є критичною вимогою, може бути ефективніше реалізовано та контрольовано в межах єдиної серверної програми, особливо для системи, призначеної для експлуатації у військовій частині з обмеженим доступом.
Хоча монолітна архітектура може мати обмеження щодо масштабованості та гнучкості для дуже великих та складних систем, для даного онлайн-інструменту з чітко окресленим функціоналом та очікуваним навантаженням вона є виправданим вибором, що забезпечує оптимальне співвідношення між швидкістю розробки, простотою підтримки та відповідністю поставленим задачам. Подальший розвиток системи, у разі значного розширення функціоналу або зростання навантаження, може передбачати поступовий перехід до більш гнучких архітектурних рішень, таких як мікросервіси, для окремих компонентів.
На основі обраної клієнт-серверної монолітної архітектури було розроблено узагальнену структурну схему(рис. 2.3) онлайн-інструменту, яка візуалізує основні компоненти системи та потоки даних між ними.
 
Рисунок 2.3 Структурна схема онлайн-інструменту обліку техніки у військовій частині
2.2.	Проектування бази даних системи моніторингу стану техніки.
Проектування бази даних є одним із найважливіших етапів створення будь-якої інформаційної системи, оскільки від її структури та організації залежить цілісність, доступність, продуктивність та гнучкість системи в цілому. База даних слугує централізованим сховищем для всієї інформації, з якою працює онлайн-інструмент моніторингу стану техніки.
При проектуванні баз даних зазвичай виділяють декілька рівнів моделювання: концептуальний, логічний та фізичний.
–	концептуальне проектування спрямоване на визначення основних сутностей предметної області, їх атрибутів та взаємозв'язків безвідносно до конкретної системи управління базами даних (СУБД). Часто для цього використовуються ER-діаграми (Entity-Relationship diagrams).
–	логічне проектування трансформує концептуальну модель у структуру даних, що відповідає обраній моделі даних, наприклад, реляційній, об'єктно-орієнтованій, NoSQL. На цьому етапі визначаються таблиці, поля, типи даних, первинні та зовнішні ключі, а також обмеження цілісності. Важливим процесом є нормалізація даних, яка допомагає усунути надлишковість та потенційні аномалії при оновленні, додаванні чи видаленні даних.
–	фізичне проектування визначає, як логічна структура даних буде реалізована на конкретній СУБД з урахуванням її особливостей, включаючи визначення індексів, способів зберігання даних, оптимізацію запитів тощо.
Для розроблюваного онлайн-інструменту моніторингу стану техніки було обрано реляційну модель даних. Реляційні бази даних представляють дані у вигляді набору пов'язаних між собою таблиць, що складаються з рядків  та стовпців. Така модель забезпечує гнучкість, надійність, добре розвинені механізми забезпечення цілісності даних та потужну теоретичну базу. Для взаємодії з реляційними БД використовується стандартизована мова запитів SQL.
На основі аналізу вимог технічного завдання та функціоналу системи була розроблена логічна схема бази даних(рис. 2.4). Вона включає набір взаємопов'язаних таблиць, що відображають ключові сутності предметної області.
 
Рисунок 2.4 Логічна схема бази даних онлайн-інструменту обліку техніки у військовій частині

Основними таблицями в розробленій базі даних є:
–	Users (Користувачі): зберігає інформацію про користувачів системи. Основні атрибути включають ідентифікатор (id), повне ім'я (name), логін (username), хеш пароля (passwordHash) та роль користувача (role). Роль визначає рівень доступу користувача до функціоналу системи (MAIN_COMMANDER, UNIT_COMMANDER, ADMIN, DUTY_STAFF).
–	Units (Підрозділи): описує військові підрозділи, за якими може бути закріплена техніка. Включає ідентифікатор (id), назву підрозділу (name) та посилання на командира підрозділу (commanderId, що є зовнішнім ключем до таблиці Users).
–	Vehicles (Транспортні засоби): проектується як центральна таблиця, що зберігатиме детальну інформацію про кожну одиницю військової техніки. До ідентифікаційних та загальних даних відносяться: id (унікальний ідентифікатор запису), name (назва або модель техніки), type (тип транспортного засобу, наприклад, легковий, вантажний, автобус, що визначатиметься переліченням enum_Vehicles_type), licensePlate (державний номерний знак), manufacturerNumber (заводський номер) та manufacturedAt (дата виготовлення). Експлуатаційні показники включатимуть operationGroup (група експлуатації, наприклад, бойова, навчальна, резерв, згідно з enum_Vehicles_operationGroup), mileageSinceManufactured (загальний пробіг з моменту виготовлення) та annualResourceNorm (встановлена річна норма ресурсу або напрацювання). Також будуть зберігатися характеристики пально-мастильних матеріалів: fuelType (тип пального, згідно з enum_Vehicles_fuelType) та oilType (тип мастила, згідно з enum_Vehicles_oilType). Для визначення приналежності кожної одиниці техніки передбачено поле unitId, яке буде зовнішнім ключем до таблиці Units. Також є поле conditionCategory (категорія технічного стану згідно з enum_Vehicles_conditionCategory), що динамічного визначається згідно стану агрегатів та збегігається в БД для швидшого обрахування аналітичними інструментами на клієнтській частині системи.
–	VehicleComponents (Агрегати транспортних засобів): деталізує інформацію про основні агрегати кожної одиниці техніки. Основні атрибути: id, назва агрегату (name), тип агрегату (componentType enum: 'ENGINE', 'GEARBOX', 'TRANSMISSION' тощо), заводський номер (manufacturerNumber), дата виготовлення (manufacturedAt), пробіг агрегату з моменту виготовлення (mileageSinceManufactured), пробіг після останнього ремонту (mileageAfterLastRepair), річна норма ресурсу (annualResourceNorm), максимальний ресурс (maxResource), категорія стану (conditionCategory enum: '1'...'5'), посилання на ТЗ (vehicleId).
–	Maintenances (Технічні обслуговування): зберігає записи про проведені технічні обслуговування для ТЗ. Включає: id, тип ТО (type enum: 'TO1', 'TO2', 'SR' (ймовірно, сезонний ремонт/обслуговування, у фронтенді 'SO' - сезонне обслуговування), 'SO'), дата проведення (date), результат/опис робіт (result), посилання на ТЗ (vehicleId).
–	Repairs (Ремонти): фіксує інформацію про ремонти ТЗ. Атрибути: id, тип ремонту (type enum: 'unplanned', 'current', 'medium', 'capital'), дата проведення (date), текстова причина ремонту (repairReasonText), опис виконаних робіт (workDescription), посилання на ТЗ (vehicleId).
–	RepairComponents (Відремонтовані агрегати): таблиця зв'язку, що деталізує, які агрегати були задіяні або відремонтовані в рамках конкретного ремонту. Включає: id, опис робіт по агрегату (workDescription), посилання на ремонт (repairId) та посилання на агрегат (vehicleComponentId).
–	MileageLogs (Записи пробігу): використовується для фіксації пробігу ТЗ на певні дати, що дозволяє розраховувати фактичне напрацювання. Атрибути: id, дата запису (date), показник пробігу (mileage), різниця пробігу з попереднім записом (mileageDifference), посилання на ТЗ (vehicleId).
–	LogEntries (Журнал подій): призначена для ведення аудиту дій у системі. Зберігає: id, тип дії (action), тип сутності (entityType), ідентифікатор сутності (entityId), мітка часу (timestamp), посилання на користувача (userId).
Зв'язки між таблицями реалізовані за допомогою первинних (id у кожній таблиці) та зовнішніх ключів (наприклад, vehicleId у таблицях Maintenances, Repairs, MileageLogs, VehicleComponents вказує на відповідний запис у таблиці Vehicles). Це забезпечує посилальну цілісність даних та дозволяє виконувати складні запити для отримання пов'язаної інформації.
Така структура бази даних дозволяє ефективно зберігати всю необхідну інформацію для моніторингу технічного стану ОВТ, обліку проведених заходів з обслуговування та ремонту, контролю за напрацюванням та ресурсом, а також для формування аналітичної звітності, як це передбачено функціональними вимогами до онлайн-інструменту.

2.3.	Принципи та методи забезпечення безпеки інформації в онлайн-інструменті.
Забезпечення інформаційної безпеки є невід'ємною та критично важливою складовою при проектуванні та розробці будь-якої інформаційної системи, особливо тієї, що призначена для використання у військовій сфері та оперує даними, які можуть мати обмежений доступ. Онлайн-інструмент для моніторингу стану техніки військової частини має гарантувати конфіденційність, цілісність та доступність інформації для авторизованих користувачів, а також захист від несанкціонованого доступу, модифікації чи знищення даних.
Інформаційна безпека зазвичай розглядається через призму трьох основних властивостей інформації:
–	конфіденційність: гарантія того, що інформація доступна лише авторизованим користувачам, процесам або системам.
–	цілісність: забезпечення точності, повноти та актуальності інформації, а також захист від несанкціонованих змін.
–	доступність: гарантія того, що авторизовані користувачі мають своєчасний та безперешкодний доступ до інформації та пов'язаних з нею активів.
Для досягнення цих цілей застосовується комплексний підхід, що включає організаційні заходи, програмно-технічні засоби захисту та правові норми. У контексті проектування онлайн-інструменту, ключова увага приділяється програмно-технічним аспектам.
В онлайн-інструменті для моніторингу стану техніки передбачається реалізація наступних ключових механізмів забезпечення безпеки: автентифікація користувачів за допомогою JWT (JSON Web Tokens) та розмежування доступу на основі ролей (Role-Based Access Control, RBAC).
Автентифікація користувачів за допомогою JWT токенів є сучасним та поширеним підходом для вебзастосунків. Процес автентифікації виглядатиме наступним чином:
1.	Користувач вводить свої облікові дані (логін та пароль) на сторінці входу.
2.	Ці дані передаються на серверну частину системи.
3.	Сервер перевіряє відповідність наданих облікових даних тим, що зберігаються в базі даних (пароль зберігається у хешованому вигляді за допомогою bcryptjs).
4.	У разі успішної перевірки, сервер генерує JWT токен, який підписаний секретним ключем і містить інформацію про користувача (наприклад, його ID та роль).
5.	Цей токен передається клієнтській частині та зберігається там (наприклад, у localStorage).
6.	При кожному наступному запиті до захищених ресурсів API, клієнтська частина автоматично додає JWT токен у заголовок Authorization (як Bearer токен).
7.	Серверна частина, за допомогою проміжного програмного забезпечення (authMiddleware.js), перевіряє валідність та термін дії токена перед обробкою запиту.
Переваги використання JWT токенів включають:
–	відсутність стану на сервері (Statelessness): серверу не потрібно зберігати інформацію про сесії користувачів, оскільки вся необхідна інформація міститься в самому токені.
–	масштабованість: завдяки відсутності стану, легше масштабувати серверну частину.
–	безпека передачі: токени підписані цифровим підписом, що гарантує їх цілісність та автентичність.
–	гнучкість: JWT можуть використовуватися для автентифікації не тільки вебклієнтів, але й мобільних застосунків чи інших сервісів.
Розмежування доступу на основі ролей дозволяє гнучко керувати правами користувачів відповідно до їхніх функціональних обов'язків у системі. Для онлайн-інструменту моніторингу стану техніки передбачені наступні основні ролі з відповідними повноваженнями, що узгоджується з визначеними типами користувачів у технічному завданні та реалізовано у коді системи:
–	адміністратор IT інфраструктури частини (ADMIN): Ця роль надає найширші повноваження в системі. Адміністратор відповідає за управління обліковими записами всіх користувачів, включаючи їх створення, редагування та видалення, а також за призначення їм відповідних ролей доступу. Крім того, адміністратор має можливість додавати нові підрозділи до системи та керувати їх списком.
–	командир частини (COMMANDER): Користувач з цією роллю має доступ до перегляду розширеної аналітики та зведеної інформації по всій військовій частині, включаючи дані про техніку всіх підрозділів, ремонти, технічні обслуговування та пробіг. Командир частини може переглядати всі дані, окрім адміністрування користувачів.
–	командир підрозділу (UNIT_COMMANDER): Ця роль дозволяє керувати всією інформацією, що стосується техніки, закріпленої за його підрозділом. Це включає можливість додавати та редагувати дані про транспортні засоби свого підрозділу, фіксувати проведені ремонти та технічні обслуговування, а також переглядати та, за потреби, керувати записами пробігу техніки свого підрозділу.
–	чергова служба (DUTY_STAFF): Користувачі з цією роллю мають найбільш обмежені повноваження, які зосереджені на оперативному введенні даних. Зокрема, чергова служба відповідає за реєстрацію пробігу транспортних засобів частини, фіксуючи відповідні показники при виїзді та поверненні техніки.
Реалізація RBAC буде здійснюватися на серверній стороні за допомогою спеціального проміжного програмного забезпечення, яке перевірятиме,  отриману з JWT токена, роль користувача перед наданням доступу до певних маршрутів API або виконання певних операцій.
Переваги такого підходу до розмежування доступу:
–	принцип мінімальних привілеїв: кожен користувач отримує лише ті права, які необхідні для виконання його службових обов'язків, що зменшує ризик несанкціонованих дій.
–	гнучкість управління доступом: дозволяє легко змінювати права доступу для окремих ролей без необхідності модифікації прав кожного користувача індивідуально.
–	спрощення адміністрування: управління доступом стає більш структурованим та легким для контролю.
–	підвищення безпеки: зменшується ймовірність випадкового чи навмисного пошкодження даних або несанкціонованого доступу до конфіденційної інформації.
Окрім автентифікації та авторизації, для забезпечення безпеки інформації в онлайн-інструменті також планується використання HTTPS для шифрування даних під час їх передачі між клієнтом та сервером, валідація вхідних даних на сервері для запобігання атакам типу SQL-ін'єкцій чи XSS, а також регулярне створення резервних копій бази даних.

Висновок до Розділу 2
У другому розділі було закладено теоретичне підґрунтя та розроблено ключові проектні рішення для створення онлайн-інструменту моніторингу стану техніки у військовій частині. На основі аналізу функціональних та нефункціональних вимог, викладених у технічному завданні, було обґрунтовано вибір клієнт-серверної архітектури з монолітною реалізацією серверної частини як оптимальної для даного етапу розробки. Така архітектура дозволяє забезпечити централізоване управління даними, легкий доступ для користувачів через вебклієнт, чітке розмежування функцій між клієнтом та сервером, а також відносну простоту розробки та розгортання для визначеного обсягу функціоналу. Було представлено узагальнену структурну схему системи, що візуалізує основні компоненти клієнтської та серверної частин, а також їх взаємодію.
Важливою частиною проектування стала розробка логічної структури бази даних. На основі реляційної моделі було визначено ключові сутності предметної області, такі як "Користувачі" (Users), "Підрозділи" (Units), "Транспортні засоби" (Vehicles), "Агрегати ТЗ" (VehicleComponents), "Технічні обслуговування" (Maintenances), "Ремонти" (Repairs) та "Записи пробігу" (MileageLogs), а також їхні атрибути та взаємозв'язки. Розроблена схема бази даних, представлена у візуальному вигляді, забезпечує ефективне зберігання та управління всією необхідною інформацією для функціонування онлайн-інструменту.
Окрему увагу було приділено питанням інформаційної безпеки. Було визначено основні принципи та методи захисту даних, зокрема, обґрунтовано використання механізму автентифікації користувачів на основі JWT токенів та розмежування доступу до функціоналу системи за допомогою рольової моделі. Детально описано ролі "Адміністратор IT інфраструктури частини", "Командир частини", "Командир підрозділу" та "Чергова служба", а також їхні основні повноваження в системі, що забезпечить контрольований доступ до даних та функцій відповідно до службових обов'язків кожного користувача.
Таким чином, у другому розділі було виконано всі необхідні проектні роботи, що створюють міцну основу для подальшої практичної реалізації онлайн-інструменту для моніторингу стану техніки у військовій частині. Розроблені архітектурні рішення, структура бази даних та принципи забезпечення безпеки спрямовані на створення надійної, функціональної та безпечної системи.
 
РОЗДІЛ 3. ПРАКТИЧНА РЕАЛІЗАЦІЯ ОНЛАЙН-ІНСТРУМЕНТУ ДЛЯ МОНІТОРИНГУ СТАНУ ТЕХНІКИ 


Після детального аналізу предметної області, обґрунтування необхідності створення онлайн-інструменту для моніторингу стану техніки у військовій частині, а також розробки його теоретичних засад, архітектури, структури бази даних та принципів забезпечення інформаційної безпеки, даний розділ присвячено безпосередній практичній реалізації спроектованої системи. На цьому етапі теоретичні напрацювання та проектні рішення втілюються у конкретний програмний продукт, готовий до розгортання та використання.
Метою цього розділу є опис ключових аспектів розробки онлайн-інструменту, починаючи від вибору інструментальних засобів та технологій, і закінчуючи реалізацією основних програмних модулів клієнтської та серверної частин. Буде детально розглянуто процес створення функціоналу, що відповідає вимогам, визначеним у технічному завданні, та забезпечує ефективну взаємодію користувачів із системою. Також буде висвітлено питання розгортання розробленого онлайн-інструменту.

3.1. Обґрунтування вибору інструментальних засобів та технологій для розробки онлайн-інструменту.
Вибір належного стеку технологій та інструментальних засобів є критично важливим для успішної реалізації будь-якого програмного продукту. Для розробки онлайн-інструменту моніторингу стану техніки у військовій частині було проведено аналіз доступних варіантів з урахуванням специфіки проекту, вимог технічного завдання, обраної клієнт-серверної монолітної архітектури, а також факторів швидкості розробки, надійності, безпеки та потенційних можливостей для подальшого масштабування. Основний технологічний стек було розділено на три ключові складові: розробка серверної частини, розробка клієнтської частини та система управління базами даних.
Серверна частина відповідає за обробку запитів від клієнтів, реалізацію основної бізнес-логіки, взаємодію з базою даних та забезпечення безпеки. Для її реалізації було обрано платформу Node.js у поєднанні з фреймворком Express.js.
Node.js (рис. 3.1) – це середовище виконання JavaScript, побудоване на рушії Chrome V8. Його вибір обумовлений кількома причинами. По-перше, Node.js використовує неблокуючу, подієво-орієнтовану модель вводу-виводу, що робить його ефективним для обробки великої кількості одночасних з'єднань, характерних для онлайн-систем. Це важливо для забезпечення швидкої реакції системи на дії користувачів. По-друге, використання JavaScript як на серверній, так і на клієнтській стороні дозволяє уніфікувати процес розробки, спростити обмін даними та логікою між клієнтською та серверною частинами, а також потенційно зменшити час на освоєння технологій командою розробників. Альтернативами могли б бути такі мови та платформи, як Python з Django/Flask, Java зі Spring, або PHP з Laravel. Однак, для даного проекту, де передбачається активна взаємодія з користувацьким інтерфейсом та обробка асинхронних запитів, Node.js видається більш підходящим завдяки своїй продуктивності в I/O операціях та великій екосистемі npm-пакетів.
Express.js (рис. 3.1)  – це мінімалістичний та гнучкий веб-фреймворк для Node.js, який надає надійний набір функцій для створення веб-застосунків та API. Його було обрано через простоту у вивченні та використанні, велику спільноту та значну кількість доступних модулі, що дозволяють легко реалізувати такі функції, як маршрутизація запитів, обробка HTTP-заголовків, робота з сесіями та автентифікацією. Для побудови REST API, що є основою взаємодії між клієнтом та сервером у даному проекті, Express.js надає зручні інструменти. Хоча існують і більш комплексні фреймворки для Node.js як, Nest.js, який пропонує більш структурований підхід, схожий на Angular.js, для монолітної архітектури та обсягу завдань дипломного проекту гнучкості та простоти Express.js цілком достатньо.
Для взаємодії з базою даних на серверній стороні було обрано Sequelize – об'єктно-реляційний проєктор (ORM) для Node.js (рис. 3.1). Sequelize підтримує роботу з різними реляційними СУБД, включаючи PostgreSQL, та дозволяє розробникам працювати з базою даних, використовуючи об'єкти JavaScript замість написання "чистих" SQL-запитів. Це спрощує розробку, підвищує її швидкість, зменшує ймовірність помилок, пов'язаних з SQL-ін'єкціями (при правильному використанні), та робить код більш читабельним та підтримуваним. Визначення моделей даних та зв'язків між ними за допомогою Sequelize дозволяє абстрагуватися від деталей конкретної СУБД. Альтернативою міг би бути Knex.js або використання "чистого" SQL, але ORM, такий як Sequelize, значно прискорює розробку CRUD-операцій та управління міграціями схеми бази даних.
 
Рисунок 3.1 Стек серверної частини

Клієнтська частина онлайн-інструменту є веб-застосунком, який надає користувачам інтерфейс для взаємодії з системою. Для її розробки було обрано бібліотеку React.js.
React.js (рис. 3.2)  – це популярна JavaScript-бібліотека для створення користувацьких інтерфейсів, розроблена Facebook. Її ключовими перевагами є компонентний підхід до розробки, використання віртуального DOM для оптимізації оновлень інтерфейсу, а також велика екосистема та активна спільнота. Компонентний підхід дозволяє розбивати складний інтерфейс на незалежні, перевикористовувані частини (компоненти), що спрощує розробку, тестування та підтримку коду. React.js дозволяє створювати динамічні та інтерактивні односторінкові застосунки (SPA), що відповідає вимогам до сучасного онлайн-інструменту. Альтернативами могли б бути такі фреймворки, як Angular.js або Vue.js. Angular.js є більш комплексним та "жорстким" фреймворком, що може бути надлишковим для даного проекту, тоді як Vue.js, хоч і відомий своєю простотою, має дещо меншу екосистему порівняно з React.js.
 
Рисунок 3.2 Основний стек клієнтської частини

Для управління станом клієнтського застосунку було обрано бібліотеку MobX. MobX пропонує простий та ефективний підхід до управління станом, заснований на концепції реактивного програмування. Він дозволяє легко визначати спостережувані дані (observables) та реакції на їх зміни (reactions), що автоматично оновлюють відповідні частини інтерфейсу. Порівняно з Redux, який часто використовується з React.js, MobX пропонує менше шаблонного коду та більш інтуїтивно зрозумілий API, що може прискорити розробку, особливо для невеликих та середніх проектів.
Для побудови користувацького інтерфейсу та забезпечення консистентного візуального стилю було використано бібліотеку компонентів Material-UI (MUI). MUI надає великий набір готових до використання, кастомізованих React-компонентів: кнопки, форми, таблиці, діалогові вікна тощо, що відповідають принципам Material Design. Це дозволяє значно прискорити розробку інтерфейсу та забезпечити його адаптивність та привабливий вигляд.
Для взаємодії з REST API серверної частини використовується бібліотека Axios, яка є популярним HTTP-клієнтом для браузера та Node.js. Для зручності розробки та “чистішого” коду, вона повинна бути інкапсульована у файлі apiClient.js для централізованого управління запитами та налаштуваннями, такими як додавання JWT токенів до заголовків запитів.
Для зберігання даних онлайн-інструменту було обрано реляційну систему управління базами даних PostgreSQL (рис. 3.3). PostgreSQL є потужною, надійною та об'єктно-реляційною СУБД з відкритим вихідним кодом, яка відома своєю відповідністю стандартам SQL, розширюваністю та продуктивністю. Вона добре підходить для зберігання структурованих даних, таких як інформація про техніку, користувачів, ремонти, ТО тощо. PostgreSQL підтримує транзакції, складні запити, різні типи індексів та має розвинені механізми забезпечення цілісності даних, що є важливим для надійності системи. Альтернативами могли б бути MySQL, яка також є популярною СУБД з відкритим кодом, або NoSQL бази даних наприклад, MongoDB. Однак, для даного проекту з чітко визначеною реляційною структурою даних та потребою у транзакційності, PostgreSQL надає кращий баланс функціональності та надійності.
 
Рисунок 3.3 Логотип PostgreSQL, бази даних системи

Для автоматизації збірки клієнтського застосунку та забезпечення ефективного процесу розробки використовується інструмент Vite (рис. 3.2). Vite забезпечує швидке "гаряче" оновлення модулів (HMR) та оптимізовану збірку для кінцевого розгортання клієнту.
Для управління залежностями як на клієнтській, так і на серверній частинах використовується менеджер пакетів npm.
Розгортання системи передбачається з використанням технології контейнеризації Docker та docker-compose (рис. 3.4). Це дозволяє ізолювати клієнтську та серверну частини та базу даних у окремі контейнери, спростити процес розгортання на різних середовищах та забезпечити консистентність конфігурації.
 
Рисунок 3.4 Логотип docker-compose, системи розгортання сервісів-контейнерів системи

Обраний стек технологій забезпечує гнучкість, продуктивність та надійність, необхідні для реалізації онлайн-інструменту моніторингу стану техніки, а також надає можливості для його подальшого розвитку та підтримки.

3.2. Розробка програмних модулів онлайн-інструменту. 
3.2.1. Реалізація серверної логіки та прикладного програмного інтерфейсу. 
Після обґрунтування вибору технологій та проектування архітектури, наступним кроком є безпосередня реалізація серверної частини онлайн-інструменту. Цей етап включає розробку бізнес-логіки для обробки даних, створення прикладного програмного інтерфейсу (API) для взаємодії з клієнтською частиною, та визначення механізмів для розрахунку ключових показників стану техніки, її обслуговування та ремонтів.
Серверна частина онлайн-інструменту побудована на платформі Node.js з використанням фреймворку Express.js. Вона реалізує RESTful API, через який клієнтський застосунок надсилає запити та отримує дані. Структура серверної частини включає маршрутизатори (routes), контролери (controllers), сервіси (services) та моделі даних (models), що взаємодіють з базою даних PostgreSQL через ORM Sequelize.
Маршрутизатори, наприклад vehicleRouter.js, відповідають за визначення кінцевих точок API та передачу запитів відповідним контролерам. 
Контролери, наприклад vehicleController.js, обробляють вхідні HTTP-запити, взаємодіють із сервісним шаром для виконання бізнес-логіки та повертають відповіді клієнту, часто у вигляді DTO (Data Transfer Objects).
Сервісний шар наприклад, VehicleService.js,  інкапсулює основну логіку обробки даних, взаємодію з моделями Sequelize (лістинг 3.4),  та розрахунок похідних показників.
Ключовим аспектом серверної логіки є обробка даних про техніку та розрахунок важливих показників її стану та експлуатації. Це реалізовано переважно в сервісах та DTO.
Обробка даних пробігу та розрахунок ресурсів: Сервіс MileageLogService.js відповідає за обробку записів пробігу. При створенні нового запису про пробіг система не тільки зберігає сам запис, але й оновлює загальний пробіг відповідного транспортного засобу та пробіг його агрегатів. Це досягається через виклик функції updateVehicleMileage з VehicleService, яка, у свою чергу, викликає функцію updateVehicleComponentsMileage. У файлі vehicle.dto.js реалізовано логіку розрахунку похідних показників для транспортного засобу, які є важливими для моніторингу:
–	annualResourceActual (Використаний ресурс за поточний рік): розраховується шляхом агрегації записів mileageDifference з таблиці MileageLogs за поточний рік для даного ТЗ. Це дозволяє командирам контролювати інтенсивність використання техніки відносно встановлених норм.
–	remainingAnnualResource (Залишок річного ресурсу): обчислюється як різниця між annualResourceNorm та annualResourceActual. Цей показник важливий для планування подальшої експлуатації ТЗ протягом року.
–	remainingResourceToNextRepair (Залишок ресурсу до наступного капітального ремонту агрегату): визначається як мінімальне значення різниці між maxResource та mileageAfterLastRepair, або mileageSinceManufactured, якщо ремонтів не було, серед усіх агрегатів ТЗ. Це критичний параметр для попередження експлуатації техніки з вичерпаним ресурсом ключових компонентів.
–	needsMaintenance (Потребує ТО): визначається на основі стану агрегатів, якщо хоча б один агрегат потребує ТО, або якщо annualResourceActual перевищує annualResourceNorm для самого ТЗ. Цей прапорець сигналізує про необхідність планового обслуговування.
–	needsCapitalRepair (Потребує капітального ремонту): встановлюється, якщо хоча б один з агрегатів ТЗ вичерпав свій максимальний ресурс mileageSinceManufactured > maxResource.
Аналогічна логіка розрахунків застосовується і на рівні окремих агрегатів у vehicleComponent.dto.js. Така деталізація дозволяє не тільки оцінювати стан ТЗ в цілому, але й моніторити стан кожного його важливого компонента, що є основою для прийняття рішень про проведення ТО та ремонтів.
Обробка даних про ремонти та визначення категорії стану: Сервіс RepairService.js та RepairComponentService.js відповідають за управління даними про ремонти ТЗ та їхніх агрегатів. Важливою бізнес-логікою тут є оновлення категорії стану агрегатів після проведення ремонту. Згідно алгоритму сервісів RepairService.js та RepairComponentService.js, категорія агрегату встановлюється залежно від типу проведеного ремонту та наявності опису виконаних робіт:  
–	якщо ремонт капітальний, категорія агрегату може бути встановлена на '4'.
–	якщо ремонт поточний або середній категорія встановлюється на '3', але якщо є опис робіт, що означає, що ремонт виконаний, категорія автоматично встановлюється на '2', як транспортний засіб з відновленими ресурсами.
Цей підхід дозволяє автоматично актуалізувати дані про стан техніки після проведення ремонтних робіт.
Сервіс MaintenanceService.js реалізує логіку для створення, оновлення, видалення та отримання даних про проведені ТО. Хоча прямих розрахунків у цьому сервісі небагато, дані про ТО використовуються опосередковано при аналізі стану техніки та плануванні її експлуатації. Наприклад, інформація про дати останніх ТО може бути використана для розрахунку міжсервісних інтервалів та прогнозування потреби у наступних обслуговуваннях.
Взаємодія між серверною та клієнтською частинами відбувається за протоколом HTTP через визначені API ендпоінти. Клієнт надсилає запити для отримання списку техніки, додавання нового ремонту, оновлення даних про пробіг і тд., а сервер обробляє ці запити та повертає відповіді у форматі JSON.
–	обробка помилок: у системі реалізовано централізований обробник помилок, який перехоплює помилки, що виникають під час обробки запитів, та повертає клієнту стандартизовану відповідь про помилку із відповідним HTTP статусом.
–	передача даних через DTO: для стандартизації структури даних, що передаються між сервером та клієнтом, використовуються DTO. Наприклад, vehicleToDto у vehicle.dto.js не тільки вибирає потрібні поля з моделі Vehicle, але й доповнює їх розрахованими показниками, такими як annualResourceActual, needsMaintenance тощо, перед відправкою на клієнт. Це дозволяє інкапсулювати логіку підготовки даних для відображення та зменшити навантаження на клієнтську частинуТака реалізація серверної логіки та API дозволяє забезпечити необхідний функціонал для онлайн-інструменту, включаючи обробку даних, розрахунок ключових показників та безпечну взаємодію з клієнтською частиною.

3.2.2. Реалізація клієнтської частини та користувацьких інтерфейсів. 
Клієнтська частина онлайн-інструменту моніторингу стану техніки розроблена як односторінковий застосунок (SPA) з використанням бібліотеки React та компонентів Material-UI (MUI). Вона забезпечує користувацький інтерфейс для взаємодії з системою, відображення даних та виконання операцій, передбачених технічним завданням.
Взаємодія клієнтської частини з серверною відбувається через REST API. Для надсилання HTTP-запитів та отримання відповідей використовується бібліотека Axios, налаштована у файлі apiClient.js. Цей клієнт автоматично додає JWT токен до заголовків запитів для автентифікації користувача на сервері.
Управління станом застосунку реалізовано за допомогою бібліотеки MobX. Для кожної ключової сутності системи: користувачі, транспортні засоби, підрозділи, ремонти, ТО, записи пробігу, створено відповідне сховище (store), наприклад, vehiclesStore.js, usersStore.js, repairsStore.js тощо. Ці сховища відповідають за:
–	завантаження даних з сервера за допомогою відповідних сервісів (наприклад, VehicleService.js викликається з vehiclesStore.js для отримання списку ТЗ).
–	зберігання отриманих даних у спостережуваних (observable) змінних.
–	надання методів для додавання, оновлення та видалення даних, які викликають відповідні функції сервісів для взаємодії з API.
–	обробку стану завантаження (loading) та можливих помилок (error).
Компоненти React, що відповідають за відображення даних у таблицях або формах, підписуються на зміни у відповідних сховищах MobX та автоматично оновлюються при зміні даних. Це забезпечує реактивність інтерфейсу та актуальність відображуваної інформації.
Клієнтська частина онлайн-інструменту включає декілька основних сторінок, що реалізують ключовий функціонал системи. Навігація між сторінками здійснюється за допомогою бібліотеки react-router-dom. Доступ до певних сторінок та функцій обмежується на основі ролі автентифікованого користувача.
Сторінка входу (рис. 3.5) надає форму для введення логіну та пароля користувача. Після успішної автентифікації на сервері та отримання JWT токена, користувач перенаправляється на головну панель або відповідну сторінку залежно від його ролі.
 
Рисунок 3.5 Сторінка входу

Головна панель статистики (рис. 3.6) є стартовою сторінкою для авторизованих користувачів з ролями COMMANDER та UNIT_COMMANDER. Відображає ключові показники та зведену аналітику щодо стану парку техніки, такі як загальна кількість ТЗ, кількість ТЗ, що потребують ремонту або ТО, кількість проведених ремонтів та ТО за поточний місяць, а також загальний пробіг за місяць. Для візуалізації використовуються компоненти статистики та кругові діаграми з використанням бібліотеки recharts.js для розподілу ТЗ за типами, групами експлуатації, типами пального та мастила. 
 
Рисунок 3.6 Головна панель статистики
Сторінки управління сутностями Користувачі, Підрозділи, ТЗ, Ремонти, ТО, Записи пробігу (рис. 3.7) зазвичай містять:
–	заголовок сторінки (компонент Header).
–	таблицю даних (компонент CustomDataGrid на основі компонента @mui/x-data-grid) для відображення списку відповідних об'єктів з можливістю сортування та фільтрації.
–	інструменти для виконання CRUD-операцій (створення, читання, оновлення, видалення), доступні через кнопки на панелі інструментів таблиці  та відповідні форми. 
 
Рисунок 3.7 Сторінка управління сутностями ТЗ

Форми створення/редагування (рис. 3.8) для кожної сутності, що реалізовані окремі компоненти форм. Ці форми використовують компоненти MUI (TextField, MenuItem для випадаючих списків, DatePicker з @mui/x-date-pickers для вибору дати, TextareaAutosize для багаторядкового введення) для збору необхідної інформації. Перед відправкою даних на сервер виконується валідація на клієнті. Наприклад, форма VehicleForm.jsx включає поля для всіх характеристик ТЗ, а також вкладену таблицю для управління агрегатами через акордеон MUI. 
 
Рисунок 3.8 Форма редагування ТЗ та його агрегатів

Сторінка календаря (рис. 3.9), що використовує бібліотеку @fullcalendar/react для візуального відображення запланованих та проведених ремонтів і технічних обслуговувань. Події на календарі мають різне кольорове кодування залежно від типу, ремонт чи ТО. Реалізовано можливість перегляду деталей події у модальному вікні (рис. 3.10)  та, для користувачів з відповідними правами, перетягування подій для зміни дати. 

 
Рисунок 3.9 Сторінка календаря з відображенням подій за рік

 
Рисунок 3.10 Сторінка календаря з відкритим модальним вікном з детальнішою інформацією про ТО

Сторінка профілю користувача (рис. 3.11) дозволяє автентифікованому користувачеві переглядати та редагувати власні дані: ПІБ, логін, пароль.
 
Рисунок 3.11 Сторінка профілю користувача

Загальний дизайн застосунку побудований з використанням кастомізованої теми MUI (theme.js), яка підтримує світлий та темний режими відображення. Навігація та доступ до основних розділів забезпечується через бічну панель та верхню панель.
Така структура та реалізація клієнтської частини спрямовані на створення зручного, інтуїтивно зрозумілого та функціонального інтерфейсу для ефективної роботи користувачів з онлайн-інструментом моніторингу стану техніки.

3.2.3. Розробка та інтеграція модуля управління доступом та розмежування прав користувачів. 
Забезпечення безпеки даних та контрольованого доступу до функціоналу є однією з ключових вимог до онлайн-інструменту моніторингу стану техніки, особливо враховуючи його призначення для використання у військовій частині. Реалізація надійного модуля управління доступом базується на двох основних механізмах: автентифікації користувачів для підтвердження їхньої особи та авторизації для надання прав доступу відповідно до призначеної ролі. Ці механізми були спроектовані у підрозділі 2.3 та втілені у програмному коді як на серверній, так і на клієнтській частинах системи.
Процес автентифікації користувачів реалізований за допомогою JSON Web Tokens. На серверній стороні, у файлі backend/src/controllers/authController.js, знаходиться логіка обробки запиту на вхід до системи. При отриманні коректних облікових даних, логіна та пароля, які перевіряються відносно хешованих паролів у базі даних, генерується JWT токен. Цей токен містить зашифровану інформацію про користувача, зокрема його ідентифікатор, логін, ПІБ  та роль, і підписується секретним ключем, що зберігається на сервері.
На клієнтській стороні, у файлі frontend/src/stores/authStore.js, реалізовано логіку відправки запиту на автентифікацію та збереження отриманого JWT токена у localStorage браузера. Спеціалізований apiClient.js налаштований таким чином, щоб автоматично додавати цей токен до заголовка Authorization, як Bearer токен, кожного наступного запиту до захищених ресурсів API.
Серверна частина, перед обробкою будь-якого запиту до захищених маршрутів, використовує проміжне програмне забезпечення authMiddleware.js. Це ПЗ перевіряє наявність та валідність JWT токена у заголовку запиту. Якщо токен валідний, інформація про користувача, що декодована з токена, додається до об'єкта запиту, що робить її доступною для подальшої обробки, зокрема для механізму розмежування прав. У випадку невалідного або відсутнього токена, доступ до ресурсу блокується.
Після успішної автентифікації в дію вступає механізм авторизації, який базується на ролях користувачів. У системі визначено чотири основні ролі, як зазначено у підрозділі 2.3 та реалізовано у переліченні enum_Users_role у базі даних та константах ROLES на клієнті: ADMIN - адміністратор IT інфраструктури частини, COMMANDER - командир частини, UNIT_COMMANDER - командир підрозділу та DUTY_STAFF - чергова служба.
Для реалізації розмежування прав на серверній стороні розроблено проміжне програмне забезпечення roleMiddleware.js. Це ПЗ приймає на вхід конфігурацію дозволів для конкретного маршруту або групи маршрутів, де вказано, які ролі та які HTTP-методи (GET, POST, PUT, DELETE) дозволені. Перед виконанням основного обробника запиту, roleMiddleware перевіряє роль поточного користувача та його право на доступ до ресурсу з використанням вказаного методу. Якщо доступ заборонено, користувач отримує відповідь зі статусом 403 Forbidden.
Конфігурація прав доступу для різних маршрутів API визначена у файлі backend/src/app.js. Наприклад:
–	адміністратор: Має повний доступ (*) до управління користувачами (/api/users) та підрозділами (/api/units).
–	командир частини: Має права на перегляд (GET) даних підрозділів, а також повний доступ до перегляду даних про техніку, ремонти, ТО, пробіг по всій частині. Він також може редагувати власний профіль (PUT-запит до /api/users/:id для власного ID).
–	командир підрозділу: Має повні права (*) на управління даними, що стосуються його підрозділу (створення, редагування, видалення ТЗ, ремонтів, ТО в межах свого підрозділу), а також право на перегляд даних підрозділів.
–	чергова служба: Має права на створення та перегляд записів про пробіг (/api/mileage-logs), а також редагування власного профілю.
На клієнтській стороні розмежування прав реалізовано через компонент ProtectedRoute.jsx, який використовується в App.jsx для обгортання маршрутів. Цей компонент перевіряє, чи автентифікований користувач  і чи належить його роль до списку дозволених ролей  для конкретного маршруту. Якщо доступ заборонено, користувач перенаправляється на сторінку входу або на сторінку "Доступ заборонено". Крім того, доступність окремих елементів інтерфейсу (наприклад, кнопок "Додати", "Редагувати", "Видалити" у також контролюється залежно від ролі користувача, отриманої з authStore.
Інтеграція модуля управління доступом відбувається на кількох рівнях:
–	на рівні API: кожен захищений маршрут на сервері обгортається відповідними authMiddleware та roleMiddleware для перевірки прав доступу перед виконанням основного контролера.
–	на рівні клієнтського застосунку: маршрутизація захищається компонентом ProtectedRoute, а видимість окремих елементів UI залежить від ролі користувача, що зберігається в authStore.
–	на рівні бази даних: ролі користувачів зберігаються в таблиці Users і використовуються для визначення їхніх повноважень.
Такий дворівневий підхід дозволяє створити надійний та гнучкий механізм управління доступом, що відповідає вимогам безпеки та функціональним потребам онлайн-інструменту.


3.3. Розгортання онлайн-інструменту.  
Після завершення розробки та тестування основних функціональних модулів онлайн-інструменту для моніторингу стану техніки, наступним важливим етапом є його розгортання у середовищі, доступному для кінцевих користувачів. Процес розгортання має забезпечити надійну та стабільну роботу системи, а також простоту її подальшої підтримки та оновлення. Для досягнення цих цілей було обрано підхід, що базується на технології контейнеризації Docker.
Docker дозволяє "запакувати" застосунок та всі його залежності в ізольовані контейнери, які можуть бути легко перенесені та запущені на будь-якій системі, що підтримує Docker, незалежно від її конфігурації. Це значно спрощує процес розгортання та усуває проблеми, пов'язані з відмінностями у середовищах розробки, тестування та експлуатації.
Для оркестрації контейнерів використовується інструмент Docker Compose. Конфігурація розгортання описана у файлі docker-compose.yaml. Цей файл визначає набір сервісів, їх образи, порти, залежності та мережеві налаштування.
Відповідно до файлу docker-compose.yaml, система розгортається у вигляді наступних сервісів:
1.	frontend (Клієнтська частина):
–	цей сервіс відповідає за запуск клієнтського React-застосунку.
–	він збирається на основі Dockerfile, розташованого у директорії ./frontend. Ймовірно, цей Dockerfile включає етапи встановлення залежностей та збірки статичних файлів для продакшену, після чого ці файли обслуговуються вебсервером.
–	порт 80 контейнера прокидається на порт 80 хост-машини, що робить клієнтську частину доступною через стандартний HTTP-порт.
2.	backend (Серверна частина):
–	сервіс, що запускає Express.js застосунок.
–	збирається на основі Dockerfile з директорії ./backend. Цей Dockerfile, ймовірно, встановлює залежності та запускає сервер.
–	порт 5001 контейнера прокидається на порт 5001 хост-машини, через який серверний API приймає запити.
–	сервіс backend залежить від сервісу postgres, що гарантує запуск бази даних перед запуском серверної частини.
3.	postgres (База даних):
–	використовує офіційний образ postgres:15.
–	налаштовується за допомогою змінних середовища для імені користувача, пароля та назви бази даних.
–	використовує іменований том postgres_data для збереження даних бази даних між перезапусками контейнера, що забезпечує персистентність даних.
–	порт 5432 контейнера прокидається на порт 5432 хост-машини для можливого прямого доступу до БД.
4.	pgadmin (Інструмент адміністрування БД):
–	використовує офіційний образ dpage/pgadmin4.
–	надає вебінтерфейс для управління базою даних PostgreSQL.
–	налаштовується за допомогою змінних середовища для email та пароля за замовчуванням.
–	порт 5050 контейнера прокидається на порт 80 хост-машини.
–	залежить від сервісу postgres.
Усі сервіси об'єднані в єдину мережу app, що дозволяє їм взаємодіяти між собою за іменами сервісів.
Для розгортання системи на сервері, де встановлено Docker та Docker Compose, необхідно виконати наступні кроки:
1.	Скопіювати проект на цільовий сервер.
2.	Переконатися, що на сервері доступні необхідні порти або змінити їх у файлі docker-compose.yaml відповідно до конфігурації сервера.
3.	Створити файл .env у директорії backend/src/config та заповнити його необхідними параметрами для підключення до бази даних та секретним ключем для JWT.
4.	З кореневої директорії проекту виконати команду docker-compose up --build -d. 
Після успішного виконання цих кроків, клієнтська частина онлайн-інструменту буде доступна за адресою сервера, серверний API буде приймати запити на порт 5001, а pgAdmin буде доступний на порту 5050.
Такий підхід до розгортання забезпечує ізоляцію компонентів, портативність рішення та спрощує управління життєвим циклом застосунку. Для реального бойового розгортання у військовій частині необхідно буде також врахувати додаткові вимоги щодо мережевої безпеки, налаштування брандмауерів, використання HTTPS для шифрування трафіку та регулярного резервного копіювання даних з тому postgres_data.

Висновок до Розділу 3
У третьому розділі дипломної роботи детально описано процес практичної реалізації онлайн-інструменту для моніторингу стану техніки у військовій частині, починаючи від вибору інструментальних засобів і закінчуючи підготовкою до розгортання системи.
Було обґрунтовано вибір технологічного стеку, включаючи Node.js та Express.js для серверної частини, React та Material-UI для клієнтської частини, а також PostgreSQL як систему управління базами даних. Розглянуто реалізацію серверної логіки, включаючи обробку API-запитів, взаємодію з базою даних через Sequelize ORM, та розрахунок ключових показників стану техніки, таких як використаний річний ресурс та потреба в обслуговуванні чи ремонті.
Детально описано розробку клієнтської частини, включаючи процес отримання та обробки даних за допомогою MobX для управління станом, а також реалізацію основних користувацьких інтерфейсів для відображення статистики, управління сутностями та роботи з календарем подій. Окрему увагу приділено інтеграції модуля управління доступом на основі JWT-токенів та рольової моделі, що забезпечує безпеку та розмежування прав користувачів як на серверній, так і на клієнтській стороні. На завершення розглянуто процес розгортання онлайн-інструменту з використанням технології Docker та Docker Compose, що забезпечує портативність та простоту розгортання системи.
Таким чином, у даному розділі було продемонстровано перетворення теоретичних проектних рішень на функціонуючий програмний продукт, що відповідає поставленим вимогам.
 
ВИСНОВКИ


У ході кваліфікаційної роботи було успішно вирішено актуальну задачу підвищення ефективності управління технічним забезпеченням у військовій частині шляхом розробки спеціалізованого онлайн-інструменту для моніторингу стану озброєння та військової техніки.
На першому етапі було проведено комплексний аналіз предметної області. Розглянуто нормативно-правове регулювання процесів експлуатації, обліку та контролю технічного стану ОВТ в Збройних Силах України, зокрема ключові положення Наказів МОУ №70 та №440, а також відповідні методичні посібники. Було виявлено недоліки існуючої практики, пов'язані переважно з ручною обробкою даних та паперовим документообігом. Аналіз наявних в Україні підходів до автоматизації, таких як використання офісного ПЗ, локальних баз даних та впровадження ERP-систем на кшталт SAP, а також вивчення світового досвіду, зокрема систем GCSS-Army (США), SIMAT (Франція) та LOGFAS (НАТО), підтвердили доцільність та актуальність створення запропонованого онлайн-інструменту. Завершальним етапом стало формування детального технічного завдання на проектування системи.
Другий розділ роботи було присвячено теоретичним засадам та безпосередньому проектуванню онлайн-інструменту. Обґрунтовано вибір клієнт-серверної архітектури з монолітною реалізацією серверної частини, що забезпечує централізоване управління даними, доступність через вебклієнт та відносну простоту початкової розробки для визначеного функціоналу. Розроблено узагальнену структурну схему системи та детальну реляційну модель бази даних PostgreSQL, що включає такі ключові сутності, як Users, Units, Vehicles, VehicleComponents, Maintenances, Repairs, MileageLogs та LogEntries. Особливу увагу приділено принципам та методам забезпечення інформаційної безпеки, зокрема автентифікації користувачів за допомогою JWT токенів та розмежуванню доступу на основі ролей: "Адміністратор IT інфраструктури частини", "Командир частини", "Командир підрозділу" та "Чергова служба".
У третьому розділі було описано практичну реалізацію спроектованого онлайн-інструменту. Детально розглянуто вибір технологічного стеку: Node.js та Express.js для серверної частини, React з Material-UI та MobX для клієнтської частини, Sequelize як ORM. Описано розробку серверної логіки, включаючи API, обробку даних пробігу, розрахунок показників ресурсу техніки та її агрегатів, а також оновлення категорій стану після ремонтів. Представлено реалізацію клієнтських інтерфейсів для управління даними, відображення статистики та календаря подій. Продемонстровано інтеграцію модуля управління доступом та розмежування прав користувачів. Також розглянуто процес розгортання системи за допомогою Docker та Docker Compose.
Результатом кваліфікаційної роботи є розроблений онлайн-інструмент, який дозволяє автоматизувати збір, обробку та аналіз даних про технічний стан ОВТ, облік ремонтів, технічних обслуговувань та пробігу. Впровадження такої системи сприятиме підвищенню оперативності отримання актуальної інформації, покращенню якості планування експлуатації та обслуговування техніки, оптимізації використання ресурсів та, як наслідок, підтриманню високого рівня боєготовності підрозділів військової частини. Подальший розвиток системи може включати розширення аналітичних можливостей, інтеграцію з іншими системами логістики та впровадження елементів предиктивного аналізу для прогнозування відмов техніки.
 
СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ


1.	Про затвердження Інструкції з обліку військового майна у Збройних Силах України: Наказ Міністерства оборони України від 17 серпня 2017 р. № 440. URL: https://zakon.rada.gov.ua/laws/show/z1111-17.
2.	Про внесення змін до Інструкції про порядок використання автомобільної техніки у Збройних Силах України: Наказ Міністерства оборони України від 05 лютого 2018 р. № 70.
3.	Методичний посібник з планування, організації та проведення заходів щодо переведення озброєння та військової техніки на літню (зимову) експлуатацію у Збройних Силах України / Головне управління логістики ГШ ЗС України. Київ, 2021. 
4.	Таненбаум Е., Уэзеролл Д. Компьютерные сети. 5-е изд. СПб.: Питер, 2012. 960 с. 
5.	Олифер В. Г., Олифер Н. А. Компьютерные сети. Принципы, технологии, протоколы: Учебник для вузов. 4-е изд. СПб.: Питер, 2010. 944 с. 
6.	Кравчук С.О., Гайдамашко В.М., Вовкодав Р.В. Проектування баз даних: навч. посіб. Житомир: ЖДТУ, 2017. 200 с. 
7.	Дейт К. Дж. Введение в системы баз данных. 8-е изд. : пер. с англ. М. : Издательский дом "Вильямс", 2005. 1328 с. 
8.	Гаевский А.Ю. Безопасность сетей на основе Microsoft Windows Server 2003. М.: НТ Пресс, 2005. 528 с. 
9.	Гайдук С.В., Корченко О.Г., Козачок Я.В. Інформаційна безпека: інженерно-технічний аспект: Навчальний посібник. Житомир: ЖВІ НАУ, 2011. 400 с. 
10.	Фрімен Е., Фрімен Е. Патерни проектування. Head First. O'Reilly, 2004. 650 с. 
11.	Мартін Р. Чистий код: створення, аналіз та рефакторинг. Prentice Hall, 2008. 464 с. 
12.	Мартін Р. Чиста архітектура: мистецтво розробки програмного забезпечення. Prentice Hall, 2017. 432 с. 
13.	Офіційний сайт Node.js. [Електронний ресурс]. – Режим доступу: https://nodejs.org/ . – Назва з екрана. 
14.	Офіційна документація Express.js. [Електронний ресурс]. – Режим доступу: https://expressjs.com/ . – Назва з екрана. 
15.	Офіційна документація React. [Електронний ресурс]. – Режим доступу: https://reactjs.org/ . – Назва з екрана. 
16.	Офіційна документація PostgreSQL. [Електронний ресурс]. – Режим доступу: https://www.postgresql.org/docs/ . – Назва з екрана. 
17.	Офіційна документація Sequelize ORM. [Електронний ресурс]. – Режим доступу: https://sequelize.org/ . – Назва з екрана. 
18.	Офіційна документація Docker. [Електронний ресурс]. – Режим доступу: https://docs.docker.com/ . – Назва з екрана. 
19.	JSON Web Tokens - jwt.io. [Електронний ресурс]. – Режим доступу: https://jwt.io/ . – Назва з екрана.
 